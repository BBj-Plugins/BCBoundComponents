
use com.basiscomponents.bc.BCBinder
use com.basiscomponents.db.DataRow
use com.basiscomponents.db.ResultSet
use com.basiscomponents.db.util.SqlTypeNames

use com.basiscomponents.ui.theming.Theme
use com.basiscomponents.i18n.Props

use com.google.gson.JsonObject

use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget

use ::BBjGridExWidget/GxColumns.bbj::GxColumn
use ::BBjGridExWidget/GxContextMenu.bbj::GxContextMenu
use ::BBjGridExWidget/GxContextMenu.bbj::GxContextMenuItem
use ::BBjGridExWidget/GxRenderers.bbj::GxRendererCustomHTML
use ::BBjGridExWidget/GxRenderers.bbj::GxRendererBoolean
use ::BBjGridExWidget/GxState.bbj::GxState
use ::BBjGridExWidget/GxStatusBar.bbj::GxStatusBarTotalAndFilteredRowCountComponent
use ::BBjGridExWidget/GxStatusBar.bbj::GxStatusBarSelectedRowCountComponent
use ::BBjGridExWidget/GxFilters.bbj::GxFilterSetFilter

use ::BusinessUIComponents/AbstractBCBoundWidget.bbj::AbstractBCBoundWidget
use ::BusinessUIComponents/ExportButton.bbj::ExportButton

REM use ::BusinessUIComponents/configurations/ConfigurationWidget.bbj::ConfigurationWidget
use ::BusinessUIComponents/configurations/ConfigurationButton.bbj::ConfigurationButton
use ::BusinessUIComponents/configurations/CustomConfigurationsBC.bbj::CustomConfigurationsBC
use ::BusinessUIComponents/configurations/IPersistentState.bbj::IPersistentState

use java.util.HashMap

rem /**
rem  * BBj Business Grid<br>
rem  * Uses a Business Component (BC), BCBinder and BBjGridExWidget.
rem  */
class public BusinessGrid extends AbstractBCBoundWidget implements IPersistentState

    field private BBjGridExWidget grid!
    field private Boolean         sending! = Boolean.FALSE
    field private Boolean         ignoreNext! = Boolean.FALSE
    
    field private String realm! = "GRD"

REM     field private ConfigurationWidget    cfgwidget!
    field private ConfigurationButton    cfgbutton!
    field private CustomConfigurationsBC cfgbc!
    field private ExportButton           exportButton!
    field private BBjButton          fitToGridButton!
    field private BBjButton          autoSizeColumnsButton!
    field private Boolean                barista!

    field private Boolean columnConfigurationSet! = Boolean.FALSE
    field private Boolean initialRetrieve! = Boolean.TRUE

    field private String state! = ""
    
    field private BBjNumber widgetHeight = 20
    
    field private Theme theme! = Theme.getInstance()
    
    rem --------------------- constructors -------------------------------------

    rem /**
    rem  * disabled default constructor
    rem  */
    method private BusinessGrid()
    methodend

    rem /**
    rem  * The constructor that creates the child-window (canvas) on which the widget is created.
    rem  *
    rem  * @param BBjWindow wnd!: parent window
    rem  * @param BBjInt id: the control ID
    rem  * @param BBjInt x: x-location
    rem  * @param BBjInt y: y-location
    rem  * @param BBjInt w: width
    rem  * @param BBjInt h: height
    rem  */
    method public BusinessGrid(BBjWindow wnd!, BBjInt id!, BBjInt x!, BBjInt y!, BBjInt w!, BBjInt h!)
        #super!.create(wnd!, id!, x!, y!, w!, h!)
    methodend

    rem /**
    rem  * The constructor using an existing child-window (canvas) on which the widget is created.
    rem  */
    method public BusinessGrid(BBjChildWindow wnd!)
        #super!.create(wnd!)
    methodend

    rem /**
    rem  * This method is called whenever the widget needs to be rendered.
    rem  *
    rem  * @param Boolean f_init!: if TRUE, the control is rendered for the first time, so this method performs initial rendering
    rem  */
    rem @Override
    method public void redraw(Boolean f_init!)
        if (f_init!) then
            rem rendering for the first time
            rem so have to initialize / create my controls
                
            canvas! = #getCanvas()
            
            cw_top! = canvas!.addChildWindow(100,0,0,1024,40,"Row",$00100800$,BBjAPI().getSysGui().getAvailableContext())
            cw_top!.setStyle("height","50px")
            cw_top!.addPanelStyle("stretch")
                
            cw_grid! = canvas!.addChildWindow(101,0,40,canvas!.getWidth(),canvas!.getHeight()-40,"Row",$00100800$,BBjAPI().getSysGui().getAvailableContext())
            cw_grid!.setStyle("height","100%")
            cw_grid!.addStyle("hundred")
            cw_grid!.addPanelStyle("stretch")
            #grid! = new BBjGridExWidget(cw_grid!)
            #grid!.getHTMLView().setStyle("height","100%")
            
            #grid!.getOptions().setNavigationBehavior(#grid!.GRID_NAVIGATION_BEHAVIOUR_NEXT_ROW())
            #grid!.setCallback(#grid!.ON_GRID_ROW_SELECT(), #this!, "onGridSelection")
            #cfgbc! = new CustomConfigurationsBC(info(3,2))

            options! = #grid!.getOptions()
            menu! = new GxContextMenu()
            menu!.addItem(GxContextMenuItem.AUTO_SIZE_ALL())
            menu!.addItem(GxContextMenuItem.RESET_COLUMNS())
            options!.setContextMenu(menu!)

            rem need to wait for next Gx release:
            options!.setSuppressCellSelection(Boolean.TRUE)

            #exportButton! = new ExportButton(cw_top!, 202, 0, 5, 20, 20)
            #exportButton!.setGrid(#this!)
            #exportButton!.setBC(new CustomConfigurationsBC(info(3,2), "configurationWidgetConfigs"))
            #exportButton!.getButton().setTabTraversable(0)
            #exportButton!.getButton().setFocusable(0)
                       
            
            pgmName! = pgm(-1)
            declare String[] split!
            split! = CAST(String[], pgmName!.split("\\"))
            if split!.length > 0 then
                pgmName$ = (split![split!.length-1]).replace(".bbj", "")
            else
                pgmName$ = "export"
            endif
            #exportButton!.setProgramName(pgmName$)
            
            #fitToGridButton! = cast(BBjButton,cw_top!.addButton(203, 25, 5, 20, 20, ""))
            #fitToGridButton!.setCallback(#fitToGridButton!.ON_BUTTON_PUSH, #this!, "fitToGrid")
            #fitToGridButton!.setTabTraversable(0)
            #fitToGridButton!.setFocusable(0)
            #fitToGridButton!.setStyle("width","30px")
            #fitToGridButton!.setStyle("height","30px")
            rem #fitToGridButton!.setBorderPainted(0)
            
            #autoSizeColumnsButton! = cast(BBjButton,cw_top!.addButton(204, 50, 5, 20, 20, ""))
            #autoSizeColumnsButton!.setCallback(#autoSizeColumnsButton!.ON_BUTTON_PUSH, #this!, "autoSizeColumns")
            #autoSizeColumnsButton!.setTabTraversable(0)
            #autoSizeColumnsButton!.setFocusable(0)
            #autoSizeColumnsButton!.setStyle("width","30px")
            #autoSizeColumnsButton!.setStyle("height","30px")
            
            rem #autoSizeColumnsButton!.setBorderPainted(0)

            statusbar! = #grid!.getStatusbar()
            statusbar!.addComponent(new GxStatusBarTotalAndFilteredRowCountComponent("right"))
            statusbar!.addComponent(new GxStatusBarSelectedRowCountComponent("center"))
            statusbar!.setComponentVisibility(GxStatusBarTotalAndFilteredRowCountComponent.getId(), Boolean.TRUE)
            
            cw_top!.setBackColor(#theme!.getBBjBackgroundColor())
            
            textProperties! = Props.getInstance()
            
            #exportButton!.setImage(#theme!.getBBjImage("IC_EXPORT",Theme.PRIMARY))
            #exportButton!.getButton().setToolTipText(textProperties!.getText("BUSINESS_GRID_TOOLTIP_EXPORT"))
            
            #fitToGridButton!.setImage(#theme!.getBBjImage("IC_FIT_TO_GRID",Theme.PRIMARY))
            #fitToGridButton!.setToolTipText(textProperties!.getText("BUSINESS_GRID_TOOLTIP_FIT_TO_GRID"))
            
            #autoSizeColumnsButton!.setImage(#theme!.getBBjImage("IC_AUTO_SIZE_COLUMNS",Theme.PRIMARY))
            #autoSizeColumnsButton!.setToolTipText(textProperties!.getText("BUSINESS_GRID_TOOLTIP_AUTO_SIZE_COLUMNS"))
      
            #widgetHeight = cast(BBjNumber, #theme!.getNumProperty("SECONDARY_TB_HEIGHT"))
            xPos = #exportButton!.getButton().getX()
            yPos = #exportButton!.getButton().getY()
            #exportButton!.setSize(#widgetHeight, #widgetHeight)
            #exportButton!.setImageSize(#widgetHeight-4, #widgetHeight-4)
            #exportButton!.setBackColor(#theme!.getBBjBackgroundColor())
            xPos = xPos + #widgetHeight
            #fitToGridButton!.setSize(#widgetHeight, #widgetHeight)
            #fitToGridButton!.setImageSize(#widgetHeight-4, #widgetHeight-4)
            #fitToGridButton!.setLocation(xPos, yPos)
            #fitToGridButton!.setBackColor(#theme!.getBBjBackgroundColor())
            xPos = xPos + #widgetHeight
            #autoSizeColumnsButton!.setSize(#widgetHeight, #widgetHeight)
            #autoSizeColumnsButton!.setImageSize(#widgetHeight-4, #widgetHeight-4)
            #autoSizeColumnsButton!.setLocation(xPos, yPos)
            #autoSizeColumnsButton!.setBackColor(#theme!.getBBjBackgroundColor())
            
            #grid!.setLocation(#grid!.getX(), #widgetHeight + 10)
      REM         if #cfgbutton! <> null() then 
      REM             xPos = xPos + #widgetHeight
      REM             #cfgbutton!.setLocation(xPos, yPos)
      REM         endif
      REM         if #cfgwidget! <> null() then 
      REM             xPos = xPos + #widgetHeight
      REM             #cfgwidget!.setMinPaddingLeft(xPos)
      REM         endif
            primary! = #theme!.getPrimaryColorPalette().getHexColor("300")
            textColor! = #theme!.getPrimaryColorPalette().getForeColor()
            
            #grid!.setTheme( #grid!.GRID_THEME_BALHAM() )
            balhamTheme! = new JsonObject()
            balhamTheme!.addProperty("--ag-balham-active-color",primary!)
            balhamTheme!.addProperty("--ag-selected-row-background-color",primary!)
            #grid!.addStyle(".ag-theme-balham",balhamTheme!)
            #grid!.addStyle(".ag-theme-balham .ag-row-selected", String.format("{""color"":""%s""}",textColor!))

            cw_top!.setBackColor(#theme!.getBBjBackgroundColor())
        endif

        if info(3,6)<>"6" then
            #Canvas!.getControl(101).setSize(#getWidth(),#getHeight()-#widgetHeight - 10)
            #grid!.setSize(#getWidth(),#getHeight()-#widgetHeight - 10)

REM         if #cfgwidget! <> null() then
REM             rem min padding for config widget to allow for the export and fitToGrid buttons to the left
REM             #cfgwidget!.setLocation(#getWidth()-155, 5)
REM         endif
        fi   
        
    methodend

    rem ---------------------- Event Handlers --------------------------------

    rem -----------------------getter and setter -----------------------------
    rem /**
    rem  * @return the BBjGridExWidget object
    rem  */
    method public BBjGridExWidget getGrid()
        methodret #grid!
    methodend

    rem /**
    rem  * @param user!
    rem  */
    method public void setConfigurationWidgetUser(String user!)
        #cfgbc!.setUserName(user!)
    methodend

    rem ----------------------grid handling---------------------------------------------

    rem /**
    rem  * This method is called by the BCBinder object after having performed a retrieval.
    rem  */
    method public void onSetData()
    
        declare ResultSet rs!
        declare ResultSet rsa!
        declare DataRow ar!
        declare HashMap fa!
        declare GxColumn column!
        declare GxRendererCustomHTML blankWhenZeroRenderer!
        declare GxRendererBoolean checkboxRenderer!

        rs! = #getBinder().getRS()
        ar! = #getBinder().getAttributesRecord()
        
        if rs! = null() or ar! = null() then methodret
        if !(ar!.isEmpty()) then

            if !(#columnConfigurationSet!) then
            
                locale! = stbl("!LOCALE")
                switch locale!.toUpperCase()
                    case "DE_DE"
                        dateMask$ = "%Dz.%Mz.%Y"
                        timestampMask$ = "%Dz.%Mz.%Y %Hz:%mz:%sz"
                        numberGroupSeparator$ = "."
                        numberDecimalSeparator$ = ","
                    break
                    case "EN_US"
                        dateMask$ = "%Mz/%Dz/%Y"
                        timestampMask$ = "%Mz/%Dz/%Y %hz:%mz:%sz"
                        numberGroupSeparator$ = ","
                        numberDecimalSeparator$ = "."
                    break
                    case "EN_GB"
                        dateMask$ = "%Dz/%Mz/%Y"
                        timestampMask$ = "%Dz/%Mz/%Y %hz:%mz:%sz"
                        numberGroupSeparator$ = ","
                        numberDecimalSeparator$ = "."
                    break
                    case "NL_NL"
                        dateMask$ = "%Dz-%Mz-%Y"
                        timestampMask$ = "%Dz-%Mz-%Y %Hz:%mz:%sz"
                        numberGroupSeparator$ = "."
                        numberDecimalSeparator$ = ","
                    break
                    case default
                        dateMask$ = "%Mz/%Dz/%Y"
                        timestampMask$ = "%Mz/%Dz/%Y %hz:%mz:%sz"
                        numberGroupSeparator$ = ","
                        numberDecimalSeparator$ = "."
                    break
                swend

                #grid!.getClientContext().addProperty("numberGroupSep",numberGroupSeparator$, err=*next)        
                #grid!.getClientContext().addProperty("numberDecimalSep",numberDecimalSeparator$, err=*next)
                rem Render grid columns based on the attributes record (w/o any data)
                
                cgroups! = new java.util.HashMap()

                for rscol = 0 to ar!.getColumnCount() - 1

                    fieldName$ = ar!.getColumnName(rscol)
                    if !(fieldName$ = "_ENTITY" or fieldName$ = "_ENTITIES") then
                    
                        fa! = ar!.getFieldAttributes(fieldName$);rem returns HashMap
    
                        hide = BBjAPI.FALSE
                        if fa!.containsKey("HIDE") then hide = num(fa!.get("HIDE"))
                        if hide then
                            rem don't add columns that should never show up in UI
                            continue
                        endif
                        
                        label$ = fieldName$
                        if fa!.containsKey("LABEL") then label$ = fa!.get("LABEL")
    
                        type =  ar!.getFieldType(fieldName$)
                        column! = #grid!.addColumn(fieldName$, label$, type)
                        column!.setEnableFilter(1)
                        
                        if fa!.containsKey("LOOKUP") AND str(fa!.get("LOOKUP")) = "1" then
                            if(BBjGridExWidget.isLicensed() AND #grid!.getForceCommunityBuild() <> 1)
                                column!.setFilter(new GxFilterSetFilter())
                            fi
                        fi

                        if fa!.containsKey("GROUP") then cgroup$ = fa!.get("GROUP")
                        if cgroup$<>"" then
                            cgroup! = cgroups!.get(cgroup$)
                            if cgroup! = null() then
                                cgroup! = new BBjVector()
                                cgroups!.put(cgroup$,cgroup!)
                            endif
                            cgroup!.addItem(fieldName$)
                        endif
                        
                        mask$ = ""
                        align$ = ""
                        
                        if fa!.containsKey("MASK") then mask$ = cvs(fa!.get("MASK"),3)
                        if mask$ <> "" then column!.setColumnMask(mask$)
                        if type = java.sql.Types.DATE or type = java.sql.Types.TIMESTAMP or type = java.sql.Types.TIME or type = java.sql.Types.BOOLEAN then
                            align$="R"
                            if fa!.containsKey("MASK") then 
                                mask$ = cvs(fa!.get("MASK"),3)
                                column! = #grid!.getColumn(fieldName$)
                                vfe! = column!.getValueFormatterExpression()
                                vfe!.setMask(mask$)
                            else
                                if type = java.sql.Types.DATE then
                                    column! = #grid!.getColumn(fieldName$)
                                    vfe! = column!.getValueFormatterExpression()
                                    vfe!.setMask(dateMask$)
                                endif
                                if type = java.sql.Types.TIMESTAMP then
                                    column! = #grid!.getColumn(fieldName$)
                                    vfe! = column!.getValueFormatterExpression()
                                    vfe!.setMask(timestampMask$)
                                endif
                            endif
                        else
                            if SqlTypeNames.isNumericType(type) then
                                align$="R"
                                if mask$ = "" then
                                    rem blank when zero
                                    blankWhenZeroRenderer! = new GxRendererCustomHTML("<% print(params.data."+fieldName$+" == 0 ? '&nbsp;' : params.data."+fieldName$+") %>")
                                    column!.setCellRenderer(blankWhenZeroRenderer!)
                                endif
                            endif
                        endif
    
                        if fa!.containsKey("ALIGN") then align$ = fa!.get("ALIGN")
    
                        switch align$
                            case "R"
                                column!.setHeaderAlignment(#grid!.GRID_ALIGN_RIGHT())
                                column!.setAlignment(#grid!.GRID_ALIGN_RIGHT())
                                break
                            case "C"
                                column!.setHeaderAlignment(#grid!.GRID_ALIGN_CENTER())
                                column!.setAlignment(#grid!.GRID_ALIGN_CENTER())
                                break
                            case default
                            case "L"
                                column!.setHeaderAlignment(#grid!.GRID_ALIGN_LEFT())
                                column!.setAlignment(#grid!.GRID_ALIGN_LEFT())
                                break
    
                        swend
                        if type = java.sql.Types.BOOLEAN  OR type = java.sql.Types.BIT then
                            checkboxRenderer! = new GxRendererBoolean()
                            checkboxRenderer!.setTrueValue("<font size=+1>&#9745;</font>")
                            checkboxRenderer!.setFalseValue("<font size=+1>&#9744;</font>")
                            column!.setCellRenderer(checkboxRenderer!)
                            
                            rem checkboxRenderer!.setTrueValue("<input type='checkbox' checked/>")
                            rem checkboxRenderer!.setFalseValue("<input type='checkbox' />")
                            
                            rem column!.getCellRenderer().setTrueValue(GxRendererBoolean.SWITCH_RENDERER())
                            rem column!.getCellRenderer().setFalseValue(GxRendererBoolean.SWITCH_RENDERER())
                        endif
    
                        if fa!.containsKey("PASSWORD") then
                            column!.setCellRenderer(new GxRendererCustomHTML("<%= ""<input readonly type='password' value='"" + params.value + ""' />"" %>"))
                        endif
                        
                    endif
                    
                next rscol

                if cgroups!.size()>0 then
                    it! = cgroups!.keySet().iterator()
                    while it!.hasNext()
                        cgroup$=it!.next()
                        #grid!.addColumnGroup(cgroup$ , cgroup$, cgroups!.get(cgroup$) , 0 , "")
                    wend
                endif

                #columnConfigurationSet! = Boolean.TRUE
            endif
        endif

        if rs!.isEmpty() then
            #grid!.clearData()
        else
            #grid!.updateData(rs!)
        endif
        rem select first row on first retrieve
        if #initialRetrieve! then
            rs! = #getBinder().getRS()
            if rs! <> null() and rs!.size() then
                #initialRetrieve! = Boolean.FALSE
                #grid!.setSelectedRow(0)
                #grid!.focus()
            endif
        else
            rem try to re-select the formerly selected record
            cursel! = #getBinder().getSelection()
            if cursel!.size()=1 then
                sel$ = #getBinder().getSelection().get(0).toString()
                if  #getBinder().getRS().get(sel$+"A",err=*endif) <> null() then
                    #getBinder().setSelection(sel$)
                endif
            endif
        endif
    methodend
    
    rem /**
    rem  *
    rem  */
    method public void onSetSelection()
            if (#sending!) then methodret

            sel! = #getBinder().getSelection()
            rs! = #getBinder().getRS()

            it! = sel!.iterator()
            s! = new BBjVector()
            while it!.hasNext()
                rowkey$ = it!.next()
REM                 i = rs!.indexOf(rowkey$)
                s!.addItem(rowkey$)
            wend

            #grid!.deselectAll()
            if (s!.size()>0) then
                #grid!.setSelectedRows(s!)
                #grid!.ensureIndexVisible(s!.getItem(0), #grid!.GRID_ROWPOS_MIDDLE())
            endif
    methodend

    rem /**
    rem  * @param ev! BBj custom event for row select
    rem  */
    method public void onGridSelection(BBjCustomEvent ev!)
        if #ignoreNext! then
            #ignoreNext! = Boolean.FALSE
            methodret
        endif

        if #getBinder().canSetSelection() then
              x! = ev!.getObject()
              rows! = x!.getSelectedRows()
              sel! = new BBjVector()
              rs! = #getBinder().getRS()
REM               if rs! = null() or rs!.isEmpty() then
REM REM                   #sending! = Boolean.TRUE
REM                   #getBinder().setSelection(sel!)
REM REM                   #sending! = Boolean.FALSE
REM                   methodret
REM               endif
              it! = rows!.iterator()
              while it!.hasNext()
                  row! = it!.next()
                  sel!.addItem(row!.asDataRow().getRowKey(), err=*next)
              wend
              #sending! = Boolean.TRUE
              #getBinder().setSelection(sel!)
              #sending! = Boolean.FALSE
         else
            #onSetSelection()
            #ignoreNext! = Boolean.TRUE
         endif
    methodend

    rem methods from interface IPersistentState

    rem /**
    rem  * This method will be called to apply the state to the widget.
    rem  *
    rem  * @param state! state string previously stored by the widget
    rem  */
    method public void applyState(String state!)
REM         #grid!.setState(new GxState(state!))
        #state! = state!
        rem on initial retrieve the grid leads longer to load and a longer retrieve is needed for the grid to be ready when the state application happens
        if #initialRetrieve! then
            delay = 2
        else
            delay = .1
        endif
        BBjAPI().createTimer("applyStateDelay", delay, #this!, "applyStateDelay");rem timer because async gridexwidget state must be applied after grid has loaded
    methodend
    
    rem /**
    rem  * This method will be called to apply the state to the widget.
    rem  *
    rem  * @param state! state string previously stored by the widget
    rem  */
    method public void applyStateDelay(BBjEvent ev!)
        BBjAPI().removeTimer("applyStateDelay",err=*next)
        #grid!.setState(new GxState(#state!))
    methodend

    rem /**
    rem  * This method will provide the widget with the current state of the component.<br>
    rem  * The widget will store this data for later retrieval.
    rem  *
    rem  * @return String containing the current state of all columns
    rem  */
    method public String retrieveState()
        methodret #grid!.getState().toString()
    methodend

    rem /**
    rem  * The widget will call this method to register itself for state changes of the component.<br>
    rem  * The method should set a callback that calls the method 'methodName' on 'callable!', whenever the state changes.<br>
    rem  * Event should be a BBjCustomEvent.
    rem  *
    rem  * @param methodName!
    rem  * @param callable!
    rem  */
    method public void setStateChangeCallback(String methodName!, CustomObject callable!)
        #grid!.setCallback(#grid!.ON_GRID_COLUMN_STATE_CHANGE(), callable!, methodName!)
    methodend

    rem /**
    rem  * Registers the governing BCBinder and creates the configuration widget.
    rem  *
    rem  * @param binder!  BCBinder object
    rem  */
    method public void setBinder(BCBinder binder!)
        #super!.setBinder(binder!)
        x$ = str(binder!.getBC())
        while pos("::"=x$)>0
            x$ = x$(pos("::"=x$)+2)
        wend
REM         #cfgwidget! = new ConfigurationWidget(#getCanvas(),201, #getWidth()-155, 5 , #this!, #realm!, x$, #cfgbc! )
        xPos = #exportButton!.getButton().getX() + (3 * #widgetHeight)
        yPos = #exportButton!.getButton().getY()
        cw! = #getCanvas().getControl(100)
        if info(3,6) <> "6" then
            #cfgbutton! = new ConfigurationButton(cw!,201, xPos, yPos, #this!, #realm!, x$, #cfgbc! )
            #cfgbutton!.applyAutoConfig()
        endif
    methodend
    
    method public void onSignal(int signal!, Object payload!)
        binder! = #getBinder()
        switch signal!
            case binder!.SIGNAL_SAVE
                #grid!.focus()
                break
            case binder!.SIGNAL_TERMINATE
REM                 #cfgwidget!.saveAutoConfig(#retrieveState())
                if #cfgbutton! <> null() then
                    #cfgbutton!.saveAutoConfig(#retrieveState())
                endif
                break
            case default
                break
        swend
    methodend

    rem /**
    rem  * @param ev!  BBjEvent object
    rem  */
    method public void fitToGrid(BBjEvent ev!)
        #fitToGrid()
    methodend

    rem /**
    rem  *
    rem  */
    method protected void fitToGrid()
        if #grid!<>null() then #grid!.setFitToGrid()
    methodend
    
    rem /**
    rem  * @param ev!  BBjEvent object
    rem  */
    method public void autoSizeColumns(BBjEvent ev!)
        #autoSizeColumns()
    methodend

    rem /**
    rem  * applies the optimal size to all columns in the grid
    rem  */
    method protected void autoSizeColumns()
        if #grid!<>null() then #grid!.autoSizeColumns()
    methodend
    
    method public ExportButton getExportButton()
        methodret #exportButton!
    methodend
    
    method public DataRow getFieldsForFieldSelection()
        dr! = new DataRow()
        visibleRowsVec! = #grid!.getState().getVisibleColumns()
        if visibleRowsVec!.size() > 0 then
            for i = 0 to visibleRowsVec!.size() - 1
                fieldName$ = visibleRowsVec!.get(i)
                dr!.setFieldValue(fieldName$, "")
            next i
        endif
        methodret dr!
    methodend
        
    method public void setRealm(String realm!)
        #realm! = realm!
REM         if #cfgwidget! <> null() then 
REM             #cfgwidget!.setRealm(realm!)
REM             #cfgwidget!.init()
REM         endif
        if #cfgbutton! <> null() then 
            #cfgbutton!.setRealm(realm!)
            #cfgbutton!.applyAutoConfig()
        endif
    methodend
   
classend