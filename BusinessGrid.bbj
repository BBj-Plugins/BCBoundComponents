
use com.basiscomponents.bc.BCBinder
use com.basiscomponents.db.DataRow
use com.basiscomponents.db.ResultSet
use com.basiscomponents.db.util.SqlTypeNames

use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget

use ::BBjGridExWidget/GxColumns.bbj::GxColumn
use ::BBjGridExWidget/GxContextMenu.bbj::GxContextMenu
use ::BBjGridExWidget/GxContextMenu.bbj::GxContextMenuItem
use ::BBjGridExWidget/GxRenderers.bbj::GxRendererCustomHTML
use ::BBjGridExWidget/GxRenderers.bbj::GxRendererBoolean
use ::BBjGridExWidget/GxState.bbj::GxState
use ::BBjGridExWidget/GxStatusBar.bbj::GxStatusBarTotalAndFilteredRowCountComponent
use ::BBjGridExWidget/GxStatusBar.bbj::GxStatusBarSelectedRowCountComponent

use ::BusinessUIComponents/AbstractBCBoundWidget.bbj::AbstractBCBoundWidget
use ::BusinessUIComponents/ExportMenuButton.bbj::ExportMenuButton

use ::BusinessUIComponents/configurations/ConfigurationWidget.bbj::ConfigurationWidget
use ::BusinessUIComponents/configurations/CustomConfigurationsBC.bbj::CustomConfigurationsBC
use ::BusinessUIComponents/configurations/IPersistentState.bbj::IPersistentState

use java.util.HashMap

rem /**
rem  * BBj Business Grid<br>
rem  * Uses a Business Component (BC), BCBinder and BBjGridExWidget.
rem  */
class public BusinessGrid extends AbstractBCBoundWidget implements IPersistentState

    field private BBjGridExWidget grid!
    field private Boolean         sending! = Boolean.FALSE
    field private Boolean         ignoreNext! = Boolean.FALSE

    field private ConfigurationWidget    cfgwidget!
    field private CustomConfigurationsBC cfgbc!
    field private ExportMenuButton       exportButton!
    field private BBjMenuButton          fitToGridButton!

    field private Boolean columnConfigurationSet! = Boolean.FALSE
    field private Boolean initialRetrieve! = Boolean.TRUE

    rem --------------------- constructors -------------------------------------

    rem /**
    rem  * disabled default constructor
    rem  */
    method private BusinessGrid()
    methodend

    rem /**
    rem  * The constructor that creates the child-window (canvas) on which the widget is created.
    rem  *
    rem  * @param BBjWindow wnd!: parent window
    rem  * @param BBjInt id: the control ID
    rem  * @param BBjInt x: x-location
    rem  * @param BBjInt y: y-location
    rem  * @param BBjInt w: width
    rem  * @param BBjInt h: height
    rem  */
    method public BusinessGrid(BBjWindow wnd!, BBjInt id!, BBjInt x!, BBjInt y!, BBjInt w!, BBjInt h!)
        #super!.create(wnd!, id!, x!, y!, w!, h!)
    methodend

    rem /**
    rem  * The constructor using an existing child-window (canvas) on which the widget is created.
    rem  */
    method public BusinessGrid(BBjChildWindow wnd!)
        #super!.create(wnd!)
    methodend

    rem /**
    rem  * This method is called whenever the widget needs to be rendered.
    rem  *
    rem  * @param Boolean f_init!: if TRUE, the control is rendered for the first time, so this method performs initial rendering
    rem  */
    rem @Override
    method public void redraw(Boolean f_init!)
        if (f_init!) then
            rem rendering for the first time
            rem so have to initialize / create my controls
            #grid! = new BBjGridExWidget(#getCanvas(), 100, 0, 30, #getWidth(), #getHeight()-30)
            #grid!.getOptions().setNavigationBehavior(#grid!.GRID_NAVIGATION_BEHAVIOUR_NEXT_ROW())
            #grid!.setCallback(#grid!.ON_GRID_ROW_SELECT(), #this!, "onGridSelection")
            #cfgbc! = new CustomConfigurationsBC(info(3,2))

            options! = #grid!.getOptions()
            menu! = new GxContextMenu()
            menu!.addItem(GxContextMenuItem.AUTO_SIZE_ALL())
            menu!.addItem(GxContextMenuItem.RESET_COLUMNS())
            options!.setContextMenu(menu!)

            rem need to wait for next Gx release:
            rem options!.setSuppressCellSelection(Boolean.TRUE)

            #exportButton! = new ExportMenuButton(#getCanvas(), 202, 0, 5, 43, 20)
            #exportButton!.setGrid(#this!)
            #exportButton!.setBC(new CustomConfigurationsBC(info(3,2), "exportButtonConfigurations"))
            
            pgmName! = pgm(-1)
            declare String[] split!
            split! = CAST(String[], pgmName!.split("\\"))
            if split!.length > 0 then
                pgmName$ = (split![split!.length-1]).replace(".bbj", "")
            else
                pgmName$ = "export"
            endif
            #exportButton!.setProgramName(pgmName$)
            
            #fitToGridButton! = #getCanvas().addMenuButton(203, 48, 5, 20, 20, "")
            #fitToGridButton!.setBorderPainted(Boolean.TRUE)
            #fitToGridButton!.setImageSize(23, 23)
            #fitToGridButton!.setCallback(#fitToGridButton!.ON_BUTTON_PUSH, #this!, "fitToGrid")

            statusbar! = #grid!.getStatusbar()
            statusbar!.addComponent(new GxStatusBarTotalAndFilteredRowCountComponent("right"))
            statusbar!.addComponent(new GxStatusBarSelectedRowCountComponent("center"))
            statusbar!.setComponentVisibility(GxStatusBarTotalAndFilteredRowCountComponent.NAME(), Boolean.TRUE)
            statusbar!.setComponentVisibility(GxStatusBarSelectedRowCountComponent.NAME(), Boolean.TRUE)

            #updateProperties()
        fi

        #grid!.setSize(#getWidth(),#getHeight()-30)

        if #cfgwidget! <> null() then
            rem min padding for config widget to allow for the export and fitToGrid buttons to the left
            #cfgwidget!.setMinPaddingLeft(75)
            #cfgwidget!.setLocation(#getWidth()-155, 5)
        fi
    methodend
    
    

    rem /**
    rem  *
    rem  */
    method protected void updateProperties()
        #super!.updateProperties()
        uiProperties! = #getUIPropertiesManager()
        #exportButton!.setImageFile(uiProperties!.getProperty("EXPORT_BTN_IMAGE"))
        #fitToGridButton!.setImageFile(uiProperties!.getProperty("FIT_TO_GRID_IMAGE"))

        height = uiProperties!.getPropertyAsNumber("CONFIG_WIDGET_HEIGHT")
        if height > 4 then
            #exportButton!.setSize(height*2, height)
            #exportButton!.setImageSize(height-4, height-4)
            #fitToGridButton!.setSize(height, height)
            #fitToGridButton!.setImageSize(height-4, height-4)
        endif
    methodend

    rem ---------------------- Event Handlers --------------------------------

    rem -----------------------getter and setter -----------------------------
    rem /**
    rem  * @return the BBjGridExWidget object
    rem  */
    method public BBjGridExWidget getGrid()
        methodret #grid!
    methodend

    rem /**
    rem  * @param user!
    rem  */
    method public void setConfigurationWidgetUser(String user!)
        #cfgbc!.setUserName(user!)
    methodend

    rem ----------------------grid handling---------------------------------------------

    rem /**
    rem  * This method is called by the BCBinder object after having performed a retrieval.
    rem  */
    method public void onSetData()
        declare ResultSet rs!
        declare ResultSet rsa!
        declare DataRow ar!
        declare HashMap fa!
        declare GxColumn column!
        declare GxRendererCustomHTML blankWhenZeroRenderer!
        declare GxRendererBoolean checkboxRenderer!

        rs! = #getBinder().getRS()
        ar! = #getBinder().getAttributesRecord()
        if rs! = null() or ar! = null() then methodret
        if rs!.getColumnCount() and !(ar!.isEmpty()) then

            if !(#columnConfigurationSet!) then
            
                locale! = stbl("!LOCALE")
                switch locale!.toUpperCase()
                    case "DE_DE"
                        dateMask$ = "%Dz.%Mz.%Y"
                        timestampMask$ = "%Dz.%Mz.%Y %Hz:%mz:%sz"
                        numberGroupSeparator$ = "."
                        numberDecimalSeparator$ = ","
                    break
                    case "EN_US"
                        dateMask$ = "%Mz/%Dz/%Y"
                        timestampMask$ = "%Mz/%Dz/%Y %hz:%mz:%sz"
                        numberGroupSeparator$ = ","
                        numberDecimalSeparator$ = "."
                    break
                    case "EN_GB"
                        dateMask$ = "%Dz/%Mz/%Y"
                        timestampMask$ = "%Dz/%Mz/%Y %hz:%mz:%sz"
                        numberGroupSeparator$ = ","
                        numberDecimalSeparator$ = "."
                    break
                    case "NL_NL"
                        dateMask$ = "%Dz-%Mz-%Y"
                        timestampMask$ = "%Dz-%Mz-%Y %Hz:%mz:%sz"
                        numberGroupSeparator$ = "."
                        numberDecimalSeparator$ = ","
                    break
                    case default
                        dateMask$ = "%Mz/%Dz/%Y"
                        timestampMask$ = "%Mz/%Dz/%Y %hz:%mz:%sz"
                        numberGroupSeparator$ = ","
                        numberDecimalSeparator$ = "."
                    break
                swend

                #grid!.getClientContext().addProperty("numberGroupSep",numberGroupSeparator$, err=*next)        
                #grid!.getClientContext().addProperty("numberDecimalSep",numberDecimalSeparator$, err=*next)

                rem Render grid columns based on the attributes record (w/o any data)
                rsa! = new ResultSet()
                rsa!.add(ar!)
                #grid!.setData(rsa!)

                for rscol = 0 to rs!.getColumnCount() - 1

                    fieldName$ = rs!.getColumnName(rscol)
                    column! = #grid!.getColumn(fieldName$)

                    rem The type in the attributes datarow and thus the grid column type represent the 'target type'
                    rem and may differ from the type in the current resultset, if a ConversionRuleSet is involved.
                    rem type = ar!.getFieldType(fieldName$)
                    type = column!.getType()

                    fa! = ar!.getFieldAttributes(fieldName$);rem returns HashMap

                    label$ = fieldName$
                    if fa!.containsKey("LABEL") then label$ = fa!.get("LABEL")
                    column!.setLabel(label$)

                    mask$ = ""
                    if fa!.containsKey("MASK") then mask$ = cvs(fa!.get("MASK"),3)
                    if mask$ <> "" then column!.setColumnMask(mask$)

                    if type = java.sql.Types.DATE or type = java.sql.Types.TIMESTAMP or type = java.sql.Types.TIME or type = java.sql.Types.BOOLEAN then
                        column!.setHeaderAlignment(#grid!.GRID_ALIGN_CENTER())
                        column!.setAlignment(#grid!.GRID_ALIGN_CENTER())
                        if fa!.containsKey("MASK") then 
                            mask$ = cvs(fa!.get("MASK"),3)
                            column! = #grid!.getColumn(fieldName$)
                            vfe! = column!.getValueFormatterExpression()
                            vfe!.setMask(mask$)
                        else
                            if type = java.sql.Types.DATE then
                                column! = #grid!.getColumn(fieldName$)
                                vfe! = column!.getValueFormatterExpression()
                                vfe!.setMask(dateMask$)
                            endif
                            if type = java.sql.Types.TIMESTAMP then
                                column! = #grid!.getColumn(fieldName$)
                                vfe! = column!.getValueFormatterExpression()
                                vfe!.setMask(timestampMask$)
                            endif
                        endif
                    else
                        if SqlTypeNames.isNumericType(type) then
                            column!.setHeaderAlignment(#grid!.GRID_ALIGN_RIGHT())
                            column!.setAlignment(#grid!.GRID_ALIGN_RIGHT())
                            if mask$ = "" then
                                rem blank when zero
                                blankWhenZeroRenderer! = new GxRendererCustomHTML("<% print(params.data."+fieldName$+" == 0 ? '&nbsp;' : params.data."+fieldName$+") %>")
                                column!.setCellRenderer(blankWhenZeroRenderer!)
                            endif
                        endif
                    endif

                    if type = java.sql.Types.BOOLEAN  OR type = java.sql.Types.BIT then
                        checkboxRenderer! = new GxRendererBoolean()
                        checkboxRenderer!.setTrueValue("<font size=+1>&#9745;</font>")
                        checkboxRenderer!.setFalseValue("<font size=+1>&#9744;</font>")
                        column!.setCellRenderer(checkboxRenderer!)
                        
                        rem checkboxRenderer!.setTrueValue("<input type='checkbox' checked/>")
                        rem checkboxRenderer!.setFalseValue("<input type='checkbox' />")
                        
                        rem column!.getCellRenderer().setTrueValue(GxRendererBoolean.SWITCH_RENDERER())
                        rem column!.getCellRenderer().setFalseValue(GxRendererBoolean.SWITCH_RENDERER())
                    endif

                    if fa!.containsKey("PASSWORD") then
                        column!.setCellRenderer(new GxRendererCustomHTML("<%= ""<input readonly type='password' value='"" + params.value + ""' />"" %>"))
                    endif

                    hide = BBjAPI.FALSE
                    if fa!.containsKey("HIDE") then hide = num(fa!.get("HIDE"))
                    if hide then column!.setHidden(hide)

                next rscol

                #columnConfigurationSet! = Boolean.TRUE
            endif

        endif

        #grid!.updateData(rs!)
        rem select first row on first retrieve
        if #initialRetrieve! then
            rs! = #getBinder().getRS()
            if rs! <> null() and rs!.size() then
                #initialRetrieve! = Boolean.FALSE
                #grid!.setSelectedRow(0)
                #grid!.focus()
            endif
        endif
    methodend
    
    

    rem /**
    rem  *
    rem  */
    method public void onSetSelection()
            if (#sending!) then methodret

            sel! = #getBinder().getSelection()
            rs! = #getBinder().getRS()

            it! = sel!.iterator()
            s! = new BBjVector()
            while it!.hasNext()
                rowkey$ = it!.next()
REM                 i = rs!.indexOf(rowkey$)
                s!.addItem(rowkey$)
            wend

            #grid!.deselectAll()
            if (s!.size()>0) then
                #grid!.setSelectedRows(s!)
                #grid!.ensureIndexVisible(s!.getItem(0), #grid!.GRID_ROWPOS_MIDDLE())
            fi
    methodend

    rem /**
    rem  * @param ev! BBj custom event for row select
    rem  */
    method public void onGridSelection(BBjCustomEvent ev!)
        if #ignoreNext! then
            #ignoreNext! = Boolean.FALSE
            methodret
        fi

        if #getBinder().canSetSelection() then
              x! = ev!.getObject()
              rows! = x!.getSelectedRows()
              sel! = new BBjVector()
              rs! = #getBinder().getRS()
              if rs! = null() or rs!.isEmpty() then
REM                   #sending! = Boolean.TRUE
                  #getBinder().setSelection(sel!)
REM                   #sending! = Boolean.FALSE
                  methodret
              endif
              it! = rows!.iterator()
              while it!.hasNext()
                  row! = it!.next()
                  sel!.addItem(row!.asDataRow().getRowKey())
              wend
              #sending! = Boolean.TRUE
              #getBinder().setSelection(sel!)
              #sending! = Boolean.FALSE
         else
            #onSetSelection()
            #ignoreNext! = Boolean.TRUE
         fi
    methodend

    rem methods from interface IPersistentState

    rem /**
    rem  * This method will be called to apply the state to the widget.
    rem  *
    rem  * @param state! state string previously stored by the widget
    rem  */
    method public void applyState(String state!)
        #grid!.setColumnState(new GxState(state!))
    methodend

    rem /**
    rem  * This method will provide the widget with the current state of the component.<br>
    rem  * The widget will store this data for later retrieval.
    rem  *
    rem  * @return String containing the current state of all columns
    rem  */
    method public String retrieveState()
        methodret #grid!.getColumnState().toString()
    methodend

    rem /**
    rem  * The widget will call this method to register itself for state changes of the component.<br>
    rem  * The method should set a callback that calls the method 'methodName' on 'callable!', whenever the state changes.<br>
    rem  * Event should be a BBjCustomEvent.
    rem  *
    rem  * @param methodName!
    rem  * @param callable!
    rem  */
    method public void setStateChangeCallback(String methodName!, CustomObject callable!)
        #grid!.setCallback(#grid!.ON_GRID_COLUMN_STATE_CHANGE(), callable!, methodName!)
    methodend

    rem /**
    rem  * Registers the governing BCBinder and creates the configuration widget.
    rem  *
    rem  * @param binder!  BCBinder object
    rem  */
    method public void setBinder(BCBinder binder!)
        #super!.setBinder(binder!)
        x$ = str(binder!.getBC())
        while pos("::"=x$)>0
            x$ = x$(pos("::"=x$)+2)
        wend
        #cfgwidget! = new ConfigurationWidget(#getCanvas(),201, #getWidth()-155, 5 , #this!, Boolean.TRUE, "GRD", x$, #cfgbc! )
    methodend
    
    method public void onSignal(int signal!, Object payload!)
        binder! = #getBinder()
        switch signal!
            case binder!.SIGNAL_SAVE
                #grid!.focus()
                break
            case binder!.SIGNAL_TERMINATE
                #cfgwidget!.saveAutoConfig(#retrieveState())
                break
            case default
                break
        swend
    methodend

    rem /**
    rem  * @param ev!  BBjEvent object
    rem  */
    method public void fitToGrid(BBjEvent ev!)
        #fitToGrid()
    methodend

    rem /**
    rem  *
    rem  */
    method private void fitToGrid()
        if #grid!<>null() then #grid!.setFitToGrid()
    methodend
    
classend