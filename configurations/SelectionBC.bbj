REM /**
REM  * ChileCustomerBC.bbj
REM  * @author vkolarov,jcorea
REM  *
REM  */

use com.basiscomponents.bc.BusinessComponent
use com.basiscomponents.bc.IConfigurationsBC
use com.basiscomponents.db.ResultSet
use com.basiscomponents.db.DataRow

use java.util.Collection
use java.util.HashMap
use java.util.HashSet
use java.util.Iterator

use ::BusinessUIComponents/configurations/CustomConfigurationsBC.bbj::CustomConfigurationsBC


class public SelectionBC implements BusinessComponent
    field protected IConfigurationsBC configurationsBC!
    field protected BusinessComponent selectedBC!
    
    field protected String keyx! = ""
    field protected String realm! = "SEL"
    field protected String setting! = ""
    
REM     field private static String FIELDNAME_SELECTION_ID! = "SELECTION_ID"
    field private static String FIELDNAME_SELECTION_DESC! = "SELECTION_DESC"
    
    method public SelectionBC(BusinessComponent selectedBC!)
        #selectedBC! = selectedBC!
        #configurationsBC! = new CustomConfigurationsBC(info(3,2))
    methodend

    field protected DataRow   Filter!
    field protected DataRow   AttributesRecord!
    field protected ResultSet ResultSet!
    field protected BBjVector FieldSelection!
    field protected BBjString Scope$
    field protected HashMap   Scopes!

REM     field protected BBjString TableName$ = "CUSTOMER"
REM     field protected BBjString template$ = "CUST_NUM:C(6):LABEL=CUST_NUM:,FIRST_NAME:C(20):LABEL=FIRST_NAME:,LAST_NAME:C(30):LABEL=Last:,COMPANY:C(30):LABEL=Company:,BILL_ADDR1:C(30):LABEL=BILL_ADDR1:,BILL_ADDR2:C(30):LABEL=BILL_ADDR2:,CITY:C(20):LABEL=CITY:,STATE:C(2):LABEL=STATE:,COUNTRY:C(20):LABEL=COUNTRY:,POST_CODE:C(12):LABEL=POST_CODE:,PHONE:C(15):LABEL=PHONE:,FAX:C(15):LABEL=FAX:,SALESPERSON:C(3):LABEL=SALESPERSON:,SHIP_ZONE:C(2):LABEL=SHIP_ZONE:,SHIP_METHOD:C(5):LABEL=SHIP_METHOD:,CURRENT_BAL:N(12):LABEL=CURRENT_BAL:,OVER_30:N(12):LABEL=OVER_30:,OVER_60:N(12):LABEL=OVER_60:,OVER_90:N(12):LABEL=OVER_90:,OVER_120:N(12):LABEL=OVER_120:,SALES_MTD:N(12):LABEL=SALES_MTD:,SALES_YTD:N(12):LABEL=SALES_YTD:,SALES_LY:N(12):LABEL=SALES_LY:,LAST_PURCH_DATE:N(7):LABEL=LAST_PURCH_DATE:,LAST_PAY_DATE:N(7):LABEL=LAST_PAY_DATE:,CREDIT_CODE:C(2):LABEL=CREDIT_CODE:"



    rem /**
    rem  * Returns an empty DataRow including all field attributes (like field name, editable, label etc.)
    rem  * @return the empty DataRow with the field attributes
    rem  */
    rem @Override
    method public DataRow getAttributesRecord()

        if #AttributesRecord! <> null() then
            methodret #AttributesRecord!
        endif
        declare DataRow selectedAR!
        
        selectedAR! = #selectedBC!.getAttributesRecord().clone()
        fieldNames! = selectedAR!.getFieldNames()
        it! = fieldNames!.iterator()
        while it!.hasNext()
            fieldName! = it!.next()
            selectedAR!.setFieldAttribute(fieldName!,"EDITABLE","1")
        wend
REM         selectedAR!.setFieldValue(#FIELDNAME_SELECTION_ID!,  "")
        selectedAR!.setFieldValue(#FIELDNAME_SELECTION_DESC!,"")
REM         selectedAR!.setFieldAttribute(#FIELDNAME_SELECTION_ID!,  "EDITABLE","2")
        selectedAR!.setFieldAttribute(#FIELDNAME_SELECTION_DESC!,"EDITABLE","2")
        
        #AttributesRecord! = selectedAR!
        methodret selectedAR!

    methodend
    
    method public void setKey(String key!)
        #keyx! = key!
    methodend
    
    method public static String FIELDNAME_SELECTION_DESC()
        methodret #FIELDNAME_SELECTION_DESC!
    methodend

    rem /**
    rem  * Set a filter to filter the search result.
    rem  * The filter is used in the retrieve method.
    rem  * If no filter is set, the retrieve method will return all customers.
    rem  * @see    #retrieve()
    rem  * @param  DataRow filter!  a DataRow object including field names and values to filter for.
    rem  *                          Filters are AND combined.
    rem  */
    rem @Override
    method public void setFilter(DataRow filter!)

REM         equal = 0
REM
REM         if #Filter! <> null() and filter! <> null() then
REM             equal = filter!.equals(#Filter!)
REM         endif
REM
REM         if !equal then
            if filter! = null() then
                #Filter! = filter!
            else
                #Filter! = filter!.clone()
            endif
            #ResultSet! = null()
REM         endif

    methodend

    method public DataRow getFilter()
        methodret #Filter!
    methodend

    rem /**
    rem  * Sets the working field selection to a custom set of fields contained in a vector.<br>
    rem  * Field selections are in addition to any scope fields.
    rem  * This method sets the working result set to NULL.
    rem  *
    rem  * @param  BBjVector fieldSelection!  a vector containing the field names
    rem  */
    rem @Override
    method public void setFieldSelection(BBjVector fieldSelection!)
        if fieldSelection! = null()  or fieldSelection!.size()=0 then
            #FieldSelection! = null()
        else
            #FieldSelection! = cast(BBjVector,fieldSelection!.clone())
        endif
        #ResultSet! = null()
    methodend

    rem /**
    rem  * Sets the working field selection to a custom set of fields contained in a data row.<br>
    rem  * Field selections are in addition to any scope fields.
    rem  * This method sets the working result set to NULL.
    rem  *
    rem  * @param fieldSelection!  a data row containing the field names (only the field names are used)
    rem  * @see #retrieve()
    rem  */
    rem @Override
    method public void setFieldSelection(DataRow fieldSelection!)
        declare Iterator iter!

        if fieldSelection! = null() or fieldSelection!.isEmpty() then
            #FieldSelection! = null()
        else
            if #FieldSelection! <> null() then
                #FieldSelection!.clear()
            else
                #FieldSelection! = BBjAPI().makeVector()
            endif
            iter! = fieldSelection!.getFieldNames().iterator()
            while iter!.hasNext()
                fieldName! = str(iter!.next())
                #FieldSelection!.addItem(fieldName!)
            wend
        endif
        #ResultSet! = null()
    methodend

    rem /**
    rem  * Sets the working field selection to a custom set of fields contained in a collection object.<br>
    rem  * Field selections are in addition to any scope fields.
    rem  * This method sets the working result set to NULL.
    rem  *
    rem  * @param fieldSelection!  a string collection containing the field names
    rem  * @see #retrieve()
    rem  */
    rem @Override
    method public void setFieldSelection(Collection fieldSelection!)
        declare Iterator iter!

        if fieldSelection! = null() or fieldSelection!.size()=0 then
            #FieldSelection! = null()
        else
            if #FieldSelection! <> null() then
                #FieldSelection!.clear()
            else
                #FieldSelection! = BBjAPI().makeVector()
            endif
            iter! = fieldSelection!.iterator()
            while iter!.hasNext()
                fieldName! = str(iter!.next())
                #FieldSelection!.addItem(fieldName!)
            wend
        endif
        #ResultSet! = null()
    methodend

    rem /**
    rem  * Set a field selection scope (A, B or D).
    rem  * If no or a wrong scope is set then the default scope (D) will be used.
    rem  * @param  BBjString scope$  the scope to set.
    rem  */
    rem @Override
    method public void setScope(BBjString scope$)

REM         if #Scope$ <> scope$ then
            #Scope$ = scope$
            #ResultSet! = null()
REM         endif

    methodend

    rem /**
    rem  * Retrieves a ResultSet with customer DataRow's.
    rem  * If a filter is set, this will be applied to filter the result.
    rem  * If a scope and/or a field selection is set, it will be used to retrieve the desired fields.
    rem  * @return ResultSet  a ResultSet with customer DataRows (may be empty).
    rem  */
    rem @Override
    method public ResultSet retrieve()
        throw "retrieve not implemented", 999
    methodend

    rem /**
    rem  * Retrieves a ResultSet with a subset of customer DataRow's.
    rem  * If a filter is set, this will be applied to filter the result.
    rem  * If a scope and/or a field selecetion are set, they will be used to retrieve the desired fields.
    rem  * @param  BBjInt    first%  the index of the first element in the subset (1 based)
    rem  * @param  BBjInt    last%   the index of the last element in the subset.
    rem  * @return ResultSet         a ResultSet with customer DataRows (may be empty).
    rem  */
    rem @Override
    method public ResultSet retrieve(BBjInt first%, BBjInt last%)
        throw "retrieve not implemented", 999
        
        declare ResultSet rs!
        rs! = new ResultSet()

        if #ResultSet! = null() then
            #retrieve()
        endif

        if #ResultSet!.size() and last% <= #ResultSet!.size() then
            for i=first% to min(last%,#ResultSet!.size()-1)
                rs!.addItem(#ResultSet!.get(i))
            next i
        endif
        methodret rs!

    methodend

    rem /**
    rem  * Validates a customer DataRow object before it can be written.
    rem  * This method is internally used by the write method.
    rem  * But it can also be called from the frontend to check for required or missing data.
    rem  * @param  DataRow dr!  a customer DataRow that will be validated
    rem  * @return BBjVector    List with validation error messages (empty list means no validation errors).
    rem  */
    rem @Override
    method public ResultSet validateWrite(DataRow dr!)

        declare ResultSet rsErrors!
        rsErrors! = new ResultSet()
        
        if dr! = null() or dr!.isEmpty() then
            #addValidationError(rsErrors!,"","SelectionsBC: Missing data to write!")
            methodret rsErrors!
        endif
        
        if !dr!.contains(#FIELDNAME_SELECTION_DESC!) then
            #addValidationError(rsErrors!,"","SelectionsBC: Missing field: " + #FIELDNAME_SELECTION_DESC!)
            methodret rsErrors!
        endif

        methodret rsErrors!

    methodend

    method protected void validateFieldContent(ResultSet rsErrors!, DataRow dr!, String fieldName!)
        attributes! = #getAttributesRecord()
        fieldAttributes! = attributes!.getFieldAttributes(fieldName!)
        if !attributes!.contains(fieldName!) then methodret
        type! = fieldAttributes!.get("ColumnTypeName")
        switch type!
            case "DATE";rem ColumnTypeName DATE
                sdf! = new SimpleDateFormat("yyyy-MM-dd")
                exc = 1; sdf!.parse(dr!.getFieldAsString(fieldName!),err=*next); exc = 0
                if exc then
                    #addValidationError(rsErrors!,fieldName!,fieldName! + " not valid. must be yyyy-MM-dd format.")
                endif
                break
            case "NUMERIC"
                exc = 1; a = num(dr!.getFieldAsString(fieldName!),err=*next); exc = 0
                if exc then
                    #addValidationError(rsErrors!,fieldName!,fieldName! + " not valid. must be numeric.")
                endif
            case default
                break
        swend
    methodend

    rem /**
    rem  * Write/persist a customer.
    rem  * @see    #validateWrite(DataRow dr!)
    rem  * @param  DataRow dr!  a customer DataRow to be persist.
    rem  * @return DataRow      the customer DataRow (may contain auto generated values/ID's)
    rem  */
    rem @Override
    method public DataRow write(DataRow dr!)
        rsErrors! = #validateWrite(dr!)
        if rsErrors!.size() then
REM             it! = rsErrors!.iterator()
REM             while it!.hasNext()
REM                 currentMessage$ = cast(DataRow, it!.next()).getFieldAsString("MESSAGE")
REM                 errormsg$ = errormsg$ + currentMessage$ + $0a$
REM             wend
            rsErrors!.get(0).getFieldAsString("MESSAGE")
            errormsg$ = rsErrors!.get(0).getFieldAsString("MESSAGE")
REM             errormsg$ = errormsg$(1,len(errormsg$)-1)
            throw errormsg$,999
            methodret
        endif

        writeDR! = new DataRow()
        
REM         id! = dr!.getFieldAsString(#FIELDNAME_SELECTION_ID!)
        setting! = dr!.getFieldAsString(#FIELDNAME_SELECTION_DESC!)
        writeDR!.setFieldValue(#configurationsBC!.getFieldNameKeyx(), #keyx!)
        writeDR!.setFieldValue(#configurationsBC!.getFieldNameSetting(), setting!)
        writeDR!.setFieldValue(#configurationsBC!.getFieldNameRealm(), #realm!)
        writeDR!.setFieldValue(#configurationsBC!.getFieldNameUserid(), #configurationsBC!.getUserName())
REM         dr!.removeField(#FIELDNAME_SELECTION_ID!, err=*next)
        dr!.removeField(#FIELDNAME_SELECTION_DESC!)
        writeDR!.setFieldValue(#configurationsBC!.getFieldNameConfig(), dr!.toJson())
        #configurationsBC!.write(writeDR!)
        methodret dr!

    methodend

    rem /**
    rem  * Validates a customer DataRow object before it can be removed.
    rem  * This method is internally used by the remove method.
    rem  * But it can also be called from the frontend to check for dependencies before it can be removed.
    rem  * @param  DataRow dr!  a customer DataRow that should be removed
    rem  * @return BBjVector    List with validation error messages (empty list means no validation errors).
    rem  */
    rem @Override
    method public ResultSet validateRemove(DataRow dr!)

        declare ResultSet rsErrors!
        rsErrors! = new ResultSet()

        methodret rsErrors!

    methodend

    method protected void addValidationError(ResultSet rs!, String field!, String errorMessage!)
        dr! = new DataRow()
        dr!.setFieldValue("MESSAGE", errorMessage!)
        dr!.setFieldValue("FIELD", errorMessage!)
        dr!.setFieldValue("TYPE", "ERROR")
        rs!.add(dr!)
    methodend

    rem /**
    rem  * Remove a customer.
    rem  * @see    #validateRemove(DataRow dr!)
    rem  * @param  DataRow dr!  a customer DataRow to be removed.
    rem  * @throws an exception if the customer does not exists.
    rem  */
    rem @Override
    method public void remove(DataRow dr!)
        throw "method not supported",999

        rsErrors! = #validateRemove(dr!)
        if rsErrors!.size() then
REM             it! = rsErrors!.iterator()
REM             while it!.hasNext()
REM                 currentMessage$ = cast(DataRow, it!.next()).getFieldAsString("MESSAGE")
REM                 errormsg$ = errormsg$ + currentMessage$ + $0a$
REM             wend
REM             errormsg$ = errormsg$(1,len(errormsg$)-1)
            rsErrors!.get(0).getFieldAsString("MESSAGE")
            errormsg$ = rsErrors!.get(0).getFieldAsString("MESSAGE")
            throw errormsg$,999
        endif


        sql$ = "DELETE FROM " + #TableName$ + " WHERE CUST_NUM=?"

        ch = sqlunt
        sqlopen(ch)#Database$
        sqlprep(ch)sql$
        sqlexec(ch)dr!.getFieldAsString("CUST_NUM")
        dim a$:sqltmpl(ch,ind=1)
        a$ = sqlfetch(ch,ind=1)
        sqlclose(ch)
        if !a.ROWS_AFFECTED then
            throw "Record doesn't exists",999
        endif

    methodend

    rem override
    method public ResultSet getLookupData(String fieldName!, DataRow dr!)
        methodret null()
    methodend

    rem /**
    rem  * Gets an initialized (predefined) data row, including all data row and field attributes.<br>
    rem  * This method can be used to set default values for a new data row.
    rem  * If NULL is passed, then a new (empty) data row is returned.
    rem  * This method sets the working data row to this one.
    rem  *
    rem  * @param predefined!  the data row with predefined fields and attributes
    rem  * @return the initialized data row
    rem  */
    rem @Override
    method public DataRow getNewObjectTemplate(DataRow predefined!)
        declare DataRow dr!

        if predefined! <> null() then
            dr! = predefined!
        else
            dr! = new DataRow()
        endif

        methodret dr!
    methodend

    rem /**
    rem  * Gets a data row of fields (the values are not used) which are allowed for filtering.<br>
    rem  * The default implementation returns the attributes record.
    rem  *
    rem  * @return the data row with fields allowed for filtering
    rem  * @see #getAttributesRecord()
    rem  */
    rem @Override
    method public DataRow getAllowedFilter()
        methodret #getAttributesRecord()
    methodend
    
    method public BusinessComponent getLookup(String fieldName!, DataRow currentDr!)
        methodret null()
    methodend


classend

