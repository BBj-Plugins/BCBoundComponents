REM /**
REM  * ExportPdfDialog.bbj
REM  * @author mneu
REM  *
REM  */

use ::BusinessUIComponents/optionsDialogs/Dialog.bbj::Dialog
use ::BusinessUIComponents/BusinessGrid.bbj::BusinessGrid
use ::FileChooser/FileChooser.bbj::FileChooser

use ::BBjGridExWidget/BBjGridExWidgetState.bbj::BBjGridExWidgetState

use com.basiscomponents.db.DataRow
use com.basiscomponents.db.ResultSet
use com.basiscomponents.db.util.DataRowJsonMapper

use com.basiscomponents.db.BBArrayList
use com.basiscomponents.db.ResultSetExporter
use com.basiscomponents.db.export.SheetConfiguration
use com.basiscomponents.db.export.ReportDetails
use com.basiscomponents.db.export.ColumnWidthCalculator

use java.io.File

use java.nio.file.Paths
use java.nio.file.Path

class public ExportPdfDialog extends Dialog

    field private BBjListButton lbPageFittingOptions!
    field private BBjListButton lbPageLayout!
    field private BBjInputN inFontSize!
REM     field private BBjButton btnSaveLocation!
REM     field private BBjStaticText stSaveLocation!
    
    field private FileChooser fileChooser!
    
    field private Boolean showsBaristaHeader! = Boolean.FALSE

    method public ExportPdfDialog(BBjString pgmName$, BusinessGrid grid!, Boolean embedded!)
        #super!(pgmName$, grid!, embedded!)
        ns! = BBjAPI().getGroupNamespace()
        ns!.setCallbackForVariable(#getpgmName() + "_PDF_" + str(#getembedded()) + "_user_action", #this!, "onFileChooserFinish")
    methodend
    
    method public ExportPdfDialog(BBjString pgmName$, Boolean embedded!)
        #super!(pgmName$, embedded!)
        ns! = BBjAPI().getGroupNamespace()
        ns!.setCallbackForVariable(#getpgmName() + "_PDF_" + str(#getembedded()) + "_user_action", #this!, "onFileChooserFinish")
    methodend

    method public void createDialogWindow()
        #createDialogWindow("Export Pdf", 180)
        wnd! = #getmainWindow()
        wnd! = cast(BBjTopLevelWindow, #buildEmbed(wnd!))
        #fillFormWithConfigurations()
        #addBaseButtons(140)
        #setCallbacks()
    methodend
    
    method private BBjWindow buildEmbed(BBjWindow wnd!)
        wnd!.addStaticText(2010, 8, 15, 150, 23, "Page options")
        #lbPageFittingOptions! = wnd!.addListButton(3010, 170, 15, 150, 200, "")
        #lbPageFittingOptions!.setFieldHeight(23)
        #lbPageFittingOptions!.addItem("normal fitting")
        #lbPageFittingOptions!.addItem("fit to width")
        #lbPageFittingOptions!.addItem("fit to height")
        #lbPageFittingOptions!.addItem("fit to page")
        #lbPageFittingOptions!.selectIndex(0)
        
        wnd!.addStaticText(2020, 8, 40, 150, 23, "Font size")
        #inFontSize! = wnd!.addInputN(3020, 170, 40, 90, 23)
        #inFontSize!.setMask("##") ; rem max font size = 99
        #inFontSize!.setNegateable(Boolean.FALSE)
        
        wnd!.addStaticText(2030, 8, 65, 150, 23, "Page layout")
        #lbPageLayout! = wnd!.addListButton(3030, 170, 65, 150, 200, "")
        #lbPageLayout!.setFieldHeight(23)
        #lbPageLayout!.addItem("portrait")
        #lbPageLayout!.addItem("landscape")
        #lbPageLayout!.selectIndex(0)
        
REM         #btnSaveLocation! = wnd!.addButton(2040, 8, 90, 150, 23, "Choose save location")
REM         #stSaveLocation! = wnd!.addStaticText(3040, 170, 90, 400, 23, "")
        
        methodret wnd!
    methodend
    
    method public BBjWindow getEmbedded(BBjWindow wnd!)
        #setMainWindow(#buildEmbed(wnd!))
        #fillFormWithConfigurations()
        #setCallbacks()
        methodret #getmainWindow()
    methodend
    
    method protected void setCallbacks()
        #super!.setCallbacks()
REM         #btnSaveLocation!.setCallback(BBjButton.ON_BUTTON_PUSH, #this!, "onSaveLocationButtonPush")
    methodend
    
REM     method public void onSaveLocationButtonPush(BBjButtonPushEvent ev!)
REM         dirOnly = 0
REM         useSaveDialog = 1
REM         if #getembedded() then dirOnly = 1, useSaveDialog = 0
REM         path$ = #getPATH()
REM         if #getcustomSaveLocation() <> "" then path$ = #getcustomSaveLocation()
REM         #fileChooser! = new FileChooser(path$, 10, 10, #getpgmName() + "_PDF_" + str(#getembedded()), 1, dirOnly, 0, useSaveDialog)
REM     methodend
    
    method public void onExportButtonPush(BBjButtonPushEvent ev!)
REM         rs! = #getgrid().getGrid().getRS()
REM         if rs! = null() or rs!.isEmpty() then methodret
REM         filePath! = #stSaveLocation!.getText()
REM         if filePath!.trim().equals("") then methodret
REM         
REM         path! = Paths.get(filePath!)
REM         outputFilename$ = path!.getFileName().toString()
REM         path$ = path!.getParent().toString() + "/"
REM         
REM         dr! = rs!.get(0)
REM         
REM         rem creating SheetConfiguration
REM         declare SheetConfiguration sheetConfiguration!
REM         sheetConfiguration! = new SheetConfiguration()
REM         
REM         fieldWidths! = ColumnWidthCalculator.calculateColumnWidths(rs!, #inFontSize!.getValue())
REM 
REM         visibleRowsVec! = #getgrid().getGrid().getColumnState().getVisibleColumns()
REM         for i = visibleRowsVec!.size() - 1 to 0 step - 1
REM             fieldName$ = visibleRowsVec!.get(i)
REM             header! = dr!.getDataField(fieldName$).getAttribute("LABEL")
REM             if header! = null() then header! = fieldName$
REM             width = fieldWidths!.getFieldAsNumber(fieldName$)
REM             sheetConfiguration!.insertColumn(header!, width, fieldName$, k)
REM         next i
REM         
REM         sheetConfiguration!.setReportDetails(new ReportDetails(0, "reportName", "tableName", "0000000000000000000001"))
REM         sheetConfiguration!.setFontSize(#inFontSize!.getValue())
REM         
REM         fitTo = #lbPageFittingOptions!.getSelectedIndex()
REM         
REM         rem exporting
REM         declare File outputFile!
REM         outputFile! = #getexporter().exportToPDF(outputFilename$, path$, rs!, sheetConfiguration!, #showsBaristaHeader!, fitTo, #lbPageLayout!.getSelectedIndex())
REM         bbjapi().getThinClient().browse(outputFile!.getAbsolutePath().replace("\", "/"))
REM         #getmainWindow().destroy()

        dirOnly = 0
        useSaveDialog = 1
        if #getembedded() then dirOnly = 1, useSaveDialog = 0
        path$ = #getPATH()
        if #getcustomSaveLocation() <> "" then path$ = #getcustomSaveLocation()
        #fileChooser! = new FileChooser(path$, 10, 10, #getpgmName() + "_PDF_" + str(#getembedded()), 1, dirOnly, 0, useSaveDialog)
    methodend   
    
    method public void setBaristaHeaderVisible(Boolean visible!)
        #showsBaristaHeader! = visible!
    methodend
    
    method public BBjNumber getSelectedFittingOption()
        methodret #lbPageFittingOptions!.getSelectedIndex()
    methodend
    
    method public void setSelectedFittingOption(BBjNumber index)
        #lbPageFittingOptions!.selectIndex(index)
    methodend
    
    method public BBjNumber getFontSize()
        methodret #inFontSize!.getValue()
    methodend
    
    method public void setFontSize(BBjNumber fontSize)
        #inFontSize!.setValue(fontSize)
    methodend
    
    method public BBjNumber getSelectedPageLayout()
        methodret #lbPageLayout!.getSelectedIndex()
    methodend
    
    method public void setSelectedPageLayout(BBjNumber index)
        #lbPageLayout!.selectIndex(index)
    methodend
    
    method public BBjString getSaveLocation()
        methodret #stSaveLocation!.getText()
    methodend
    
    method protected void fillFormWithConfigurations()
        config$ = #getConfigurations()
        if config$ = "" then methodret
        
        dr! = DataRowJsonMapper.fromJson(config$)
        dr! = cast(DataRow, dr!.getField("pdf").getValue())
        #lbPageFittingOptions!.selectIndex(dr!.getFieldAsNumber("fitting").intValue())
        #inFontSize!.setValue(dr!.getFieldAsNumber("fontSize"))
        #lbPageLayout!.selectIndex(dr!.getFieldAsNumber("pageLayout").intValue())
        #setCustomSaveLocation(dr!.getFieldAsString("path"))
        
REM         if #getembedded() then
REM             if #getcustomSaveLocation() = "" then
REM                 #stSaveLocation!.setText(#getPATH())
REM             else
REM                 #stSaveLocation!.setText(dr!.getFieldAsString("path"))
REM             endif
REM         endif
    methodend
    
    method public void onFileChooserFinish(BBjNamespaceEvent ev!)
        val! = ev!.getNewValue()
        
        switch val!
            case "::SAVE::"
            case "::OPEN::"
                chosenDirOrFilePath! = #fileChooser!.getSelectedFile()
                break
            case "::CANCEL::"
                rem do nothing
                methodret
                break
        swend
        
        if !chosenDirOrFilePath!.toLowerCase().endsWith(".pdf") then chosenDirOrFilePath! = chosenDirOrFilePath! + ".pdf"
        
        #disableDialogButtons()
        
        rs! = #getgrid().getGrid().getRS()
REM         if rs! = null() or rs!.isEmpty() then methodret
        
        path! = Paths.get(chosenDirOrFilePath!)
        outputFilename$ = path!.getFileName().toString()
        path$ = path!.getParent().toString() + "/"
        
        dr! = rs!.get(0)
        
        rem creating SheetConfiguration
        declare SheetConfiguration sheetConfiguration!
        sheetConfiguration! = new SheetConfiguration()
        
        fieldWidths! = ColumnWidthCalculator.calculateColumnWidths(rs!, #inFontSize!.getValue())

        visibleRowsVec! = #getgrid().getGrid().getColumnState().getVisibleColumns()
        for i = visibleRowsVec!.size() - 1 to 0 step - 1
            fieldName$ = visibleRowsVec!.get(i)
            header! = dr!.getDataField(fieldName$).getAttribute("LABEL")
            if header! = null() then header! = fieldName$
            width = fieldWidths!.getFieldAsNumber(fieldName$)
            sheetConfiguration!.insertColumn(header!, width, fieldName$, k)
        next i
        
        sheetConfiguration!.setReportDetails(new ReportDetails(0, "reportName", "tableName", "0000000000000000000001"))
        sheetConfiguration!.setFontSize(#inFontSize!.getValue())
        
        fitTo = #lbPageFittingOptions!.getSelectedIndex()
        
        rem exporting
        declare File outputFile!
        outputFile! = #getexporter().exportToPDF(outputFilename$, path$, rs!, sheetConfiguration!, #showsBaristaHeader!, fitTo, #lbPageLayout!.getSelectedIndex())
        bbjapi().getThinClient().browse(outputFile!.getAbsolutePath().replace("\", "/"))
        #getmainWindow().destroy()
    methodend
    
classend