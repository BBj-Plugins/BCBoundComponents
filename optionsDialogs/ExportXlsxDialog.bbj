REM /**
REM  * ExportPdfDialog.bbj
REM  * @author mneu
REM  *
REM  */

use ::BusinessUIComponents/optionsDialogs/Dialog.bbj::Dialog
use ::BusinessUIComponents/BusinessGrid.bbj::BusinessGrid

use ::FileChooser/FileChooser.bbj::FileChooser

use ::BBjGridExWidget/BBjGridExWidgetState.bbj::BBjGridExWidgetState

use com.basiscomponents.db.DataRow
use com.basiscomponents.db.ResultSet
use com.basiscomponents.db.util.DataRowJsonMapper

use com.basiscomponents.db.BBArrayList
use com.basiscomponents.db.export.SheetConfiguration
use com.basiscomponents.db.export.ReportDetails
use com.basiscomponents.db.ResultSetExporter

use java.io.File

use com.google.gson.Gson
use com.google.gson.JsonElement
use com.google.gson.JsonObject

class public ExportXlsxDialog extends Dialog

    field private BBjCheckBox cbWriteHeader!
REM     field private BBjButton btnSaveLocation!
REM     field private BBjStaticText stSaveLocation!
    
    field private FileChooser fileChooser!
    
    field private Boolean showsBaristaHeader! = Boolean.FALSE

    method public ExportXlsxDialog(BBjString pgmName$, BusinessGrid grid!, Boolean embedded!)
        #super!(pgmName$, grid!, embedded!)
        ns! = BBjAPI().getGroupNamespace()
        ns!.setCallbackForVariable(#getpgmName() + "_XLSX_" + str(#getembedded()) + "_user_action", #this!, "onFileChooserFinish")
    
    methodend
    
    method public ExportXlsxDialog(BBjString pgmName$, Boolean embedded!)
        #super!(pgmName$, embedded!)
        ns! = BBjAPI().getGroupNamespace()
        ns!.setCallbackForVariable(#getpgmName() + "_XLSX_" + str(#getembedded()) + "_user_action", #this!, "onFileChooserFinish")
    methodend

    method public void createDialogWindow()
        #createDialogWindow("Export Xlsx", 130)
        wnd! = #getmainWindow()
        wnd! = cast(BBjTopLevelWindow, #buildEmbed(wnd!))
        #fillFormWithConfigurations()
        #addBaseButtons(90)
        #setCallbacks()
    methodend
    
    method private BBjWindow buildEmbed(BBjWindow wnd!)
        wnd!.addStaticText(2010, 8, 15, 150, 23, "Write header")
        #cbWriteHeader! = wnd!.addCheckBox(3010, 170, 15, 23, 23, "")
        
REM         #btnSaveLocation! = wnd!.addButton(2020, 8, 40, 150, 23, "Choose save location")
REM         #stSaveLocation! = wnd!.addStaticText(3020, 170, 40, 400, 23, "")
        
        methodret wnd!
    methodend
    
    method public BBjWindow getEmbedded(BBjWindow wnd!)
        #setMainWindow(#buildEmbed(wnd!))
        #fillFormWithConfigurations()
        #setCallbacks()
        methodret #getmainWindow()
    methodend
    
    method protected void setCallbacks()
        #super!.setCallbacks()
REM         #btnSaveLocation!.setCallback(BBjButton.ON_BUTTON_PUSH, #this!, "onSaveLocationButtonPush")
    methodend
    
REM     method public void onSaveLocationButtonPush(BBjButtonPushEvent ev!)
REM         dirOnly = 0
REM         useSaveDialog = 1
REM         if #getembedded() then dirOnly = 1, useSaveDialog = 0
REM         path$ = #getPATH()
REM         if #getcustomSaveLocation() <> "" then path$ = #getcustomSaveLocation()
REM         #fileChooser! = new FileChooser(path$, 10, 10, #getpgmName() + "_XLSX_" + str(#getembedded()), 1, dirOnly, 0, useSaveDialog)
REM     methodend
    
    method public void onExportButtonPush(BBjButtonPushEvent ev!)
REM         rs! = #getgrid().getGrid().getRS()
REM         if rs! = null() or rs!.isEmpty() then methodret
REM         path$ = #stSaveLocation!.getText()
REM         if cvs(path$,3) = "" then methodret
REM         
REM         dr! = rs!.get(0)
REM         
REM         rem creating SheetConfiguration
REM         declare SheetConfiguration sheetConfiguration!
REM         sheetConfiguration! = new SheetConfiguration()
REM 
REM         visibleRowsVec! = #getgrid().getGrid().getColumnState().getVisibleColumns()
REM         for i = visibleRowsVec!.size() - 1 to 0 step - 1
REM             fieldName$ = visibleRowsVec!.get(i)
REM             header! = dr!.getDataField(fieldName$).getAttribute("LABEL")
REM             if header! = null() then header! = fieldName$
REM             width = 1000
REM             sheetConfiguration!.insertColumn(header!, width, fieldName$, k)
REM         next i
REM         
REM         rem exporting
REM         declare File outputFile!
REM         outputFile! = new File(path$)
REM         
REM         writeHeader! = #cbWriteHeader!.isSelected()
REM         
REM         #getexporter().writeXLSX(rs!, outputFile!, writeHeader!, sheetConfiguration!)
REM         #getmainWindow().destroy()
        
        dirOnly = 0
        useSaveDialog = 1
        if #getembedded() then dirOnly = 1, useSaveDialog = 0
        path$ = #getPATH()
        if #getcustomSaveLocation() <> "" then path$ = #getcustomSaveLocation()
        #fileChooser! = new FileChooser(path$, 10, 10, #getpgmName() + "_XLSX_" + str(#getembedded()), 1, dirOnly, 0, useSaveDialog)
    methodend
    
    method public Boolean isWriteHeaderChecked()
        methodret #cbWriteHeader!.isSelected()
    methodend
    
    method public void setWriteHeaderSelected(Boolean selected!)
        #cbWriteHeader!.setSelected(selected!)
    methodend
    
    method public BBjString getSaveLocation()
        methodret #stSaveLocation!.getText()
    methodend
    
    method protected void fillFormWithConfigurations()
        config$ = #getConfigurations("xlsx")
        if config$ = "" then methodret
        
        dr! = DataRowJsonMapper.fromJson(config$)
        dr! = cast(DataRow, dr!.getField("xlsx").getValue())
        #cbWriteHeader!.setSelected(dr!.getFieldAsNumber("writeHeader").intValue())
REM         #setCustomSaveLocation(dr!.getFieldAsString("path"))
        
REM         if #getembedded() then
REM             if #getcustomSaveLocation() = "" then
REM                 #stSaveLocation!.setText(#getPATH())
REM             else
REM                 #stSaveLocation!.setText(dr!.getFieldAsString("path"))
REM             endif
REM         endif
    methodend
    
    method public void onFileChooserFinish(BBjNamespaceEvent ev!)
        val! = ev!.getNewValue()
        
        switch val!
            case "::SAVE::"
            case "::OPEN::"
                chosenDirOrFilePath! = #fileChooser!.getSelectedFile()
                break
            case "::CANCEL::"
                rem do nothing
                methodret
                break
        swend
        
        if !chosenDirOrFilePath!.toLowerCase().endsWith(".xlsx") then chosenDirOrFilePath! = chosenDirOrFilePath! + ".xlsx"

        #disableDialogButtons()
            
        rs! = #getgrid().getGrid().getRS()
REM         if rs! = null() or rs!.isEmpty() then methodret
        
        dr! = rs!.get(0)
        
        rem creating SheetConfiguration
        declare SheetConfiguration sheetConfiguration!
        sheetConfiguration! = new SheetConfiguration()

        visibleRowsVec! = #getgrid().getGrid().getColumnState().getVisibleColumns()
        for i = visibleRowsVec!.size() - 1 to 0 step - 1
            fieldName$ = visibleRowsVec!.get(i)
            header! = dr!.getDataField(fieldName$).getAttribute("LABEL")
            if header! = null() then header! = fieldName$
            width = 1000
            sheetConfiguration!.insertColumn(header!, width, fieldName$, k)
        next i
        
        rem exporting
        declare File outputFile!
        rem outputFile! = new File(chosenDirOrFilePath!)
		if info(3,6) = "5" then
			outputFile! = java.io.File.createTempFile("tempFile", ".xlsx")
			outputFile!.createNewFile()
		else
			outputFile! = new File(chosenDirOrFilePath!)
		endif
        
        writeHeader! = #cbWriteHeader!.isSelected()
		
        #getexporter().writeXLSX(rs!, outputFile!, writeHeader!, sheetConfiguration!)
		
		if info(3,6) = "5" then
			fs! = bbjapi().getThinClient().getClientFileSystem() 
			cf! = fs!.getClientFile(chosenDirOrFilePath!) 
			cf!.copyToClient(outputFile!.getAbsolutePath())
		endif
		
        #saveConfiguration()
        #getmainWindow().destroy()
    methodend
    
    method private void saveConfiguration()
        json! = new JsonObject()
        json!.add("xlsx", new JsonObject())
        
        xlsx! = json!.getAsJsonObject("xlsx")
        xlsx!.addProperty("writeHeader", #isWriteHeaderChecked())
        
        #saveConfiguration(new Gson().toJson(json!), "xlsx")
    methodend

classend