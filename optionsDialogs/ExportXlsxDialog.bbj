REM /**
REM  * ExportPdfDialog.bbj
REM  * @author mneu
REM  *
REM  */

use ::BusinessUIComponents/optionsDialogs/Dialog.bbj::Dialog
use ::BusinessUIComponents/BusinessGrid.bbj::BusinessGrid

use ::FileChooser/FileChooser.bbj::FileChooser

use ::BBjGridExWidget/BBjGridExWidgetState.bbj::BBjGridExWidgetState

use com.basiscomponents.db.DataRow
use com.basiscomponents.db.ResultSet
use com.basiscomponents.db.util.DataRowJsonMapper

use com.basiscomponents.db.BBArrayList
use com.basiscomponents.db.export.SheetConfiguration
use com.basiscomponents.db.export.ReportDetails
use com.basiscomponents.db.ResultSetExporter

use java.io.File

use com.google.gson.Gson
use com.google.gson.JsonElement
use com.google.gson.JsonObject

class public ExportXlsxDialog extends Dialog

    field private BBjCheckBox cbWriteHeader!
    
    field private FileChooser fileChooser!
    
    field private Boolean showsBaristaHeader! = Boolean.FALSE

    method public ExportXlsxDialog(BBjString pgmName$, BusinessGrid grid!, Boolean embedded!)
        #super!(pgmName$, grid!, embedded!)
        ns! = BBjAPI().getGroupNamespace()
        ns!.setCallbackForVariable(#getpgmName() + "_XLSX_" + str(#getembedded()) + "_user_action", #this!, "onFileChooserFinish")
    
    methodend
    
    method public ExportXlsxDialog(BBjString pgmName$, Boolean embedded!)
        #super!(pgmName$, embedded!)
        ns! = BBjAPI().getGroupNamespace()
        ns!.setCallbackForVariable(#getpgmName() + "_XLSX_" + str(#getembedded()) + "_user_action", #this!, "onFileChooserFinish")
    methodend

    method public void createDialogWindow()
        #createDialogWindow("Export Xlsx", 130)
        wnd! = #getmainWindow()
        wnd! = cast(BBjTopLevelWindow, #buildEmbed(wnd!))
        #fillFormWithConfigurations()
        #addBaseButtons(90)
        #setCallbacks()
    methodend
    
    method private BBjWindow buildEmbed(BBjWindow wnd!)
        wnd!.addStaticText(2010, 8, 15, 150, 23, "Write header")
        #cbWriteHeader! = wnd!.addCheckBox(3010, 170, 15, 23, 23, "")
        
        methodret wnd!
    methodend
    
    method public BBjWindow getEmbedded(BBjWindow wnd!)
        #setMainWindow(#buildEmbed(wnd!))
        #fillFormWithConfigurations()
        #setCallbacks()
        methodret #getmainWindow()
    methodend
    
    method protected void setCallbacks()
        #super!.setCallbacks()
    methodend
    
    method public void onExportButtonPush(BBjButtonPushEvent ev!)
        if info(3,6) = "5" then
            #export(#getpgmName() + ".xlsx")
        else
            dirOnly = 0
            useSaveDialog = 1
            if #getembedded() then dirOnly = 1, useSaveDialog = 0
            path$ = #getPATH()
            if #getcustomSaveLocation() <> "" then path$ = #getcustomSaveLocation()
            #fileChooser! = new FileChooser(path$, 10, 10, #getpgmName() + "_XLSX_" + str(#getembedded()), 1, dirOnly, 0, useSaveDialog)
        endif
    methodend
    
    method public Boolean isWriteHeaderChecked()
        methodret #cbWriteHeader!.isSelected()
    methodend
    
    method public void setWriteHeaderSelected(Boolean selected!)
        #cbWriteHeader!.setSelected(selected!)
    methodend
    
    method public BBjString getSaveLocation()
        methodret #stSaveLocation!.getText()
    methodend
    
    method protected void fillFormWithConfigurations()
        config$ = #getConfigurations("xlsx")
        if config$ = "" then methodret
        
        dr! = DataRowJsonMapper.fromJson(config$)
        dr! = cast(DataRow, dr!.getField("xlsx").getValue())
        #cbWriteHeader!.setSelected(dr!.getFieldAsNumber("writeHeader").intValue())
    methodend
    
    method public void onFileChooserFinish(BBjNamespaceEvent ev!)
        val! = ev!.getNewValue()
        
        switch val!
            case "::SAVE::"
            case "::OPEN::"
                chosenDirOrFilePath! = #fileChooser!.getSelectedFile()
                break
            case "::CANCEL::"
                rem do nothing
                methodret
                break
        swend
        
        if !chosenDirOrFilePath!.toLowerCase().endsWith(".xlsx") then chosenDirOrFilePath! = chosenDirOrFilePath! + ".xlsx"

        #export(chosenDirOrFilePath!)
    methodend
    
    method private void export(BBjString chosenDirOrFilePath!)
        #disableDialogButtons()
            
        rs! = #getgrid().getGrid().getRS()
        
        dr! = rs!.get(0)
        
        rem creating SheetConfiguration
        declare SheetConfiguration sheetConfiguration!
        sheetConfiguration! = new SheetConfiguration()

        visibleRowsVec! = #getgrid().getGrid().getColumnState().getVisibleColumns()
        for i = visibleRowsVec!.size() - 1 to 0 step - 1
            fieldName$ = visibleRowsVec!.get(i)
            header! = dr!.getDataField(fieldName$).getAttribute("LABEL")
            if header! = null() then header! = fieldName$
            width = 1000
            sheetConfiguration!.insertColumn(header!, width, fieldName$, k)
        next i
        
        rem exporting
        declare File outputFile!
        if info(3,6) = "5" then
            outputFile! = java.io.File.createTempFile("tempFile", ".xlsx")
            outputFile!.createNewFile()
        else
            outputFile! = new File(chosenDirOrFilePath!)
        endif
        
        writeHeader! = #cbWriteHeader!.isSelected()
        
        #getexporter().writeXLSX(rs!, outputFile!, writeHeader!, sheetConfiguration!)
        
        if info(3,6) = "5" then
            fs! = bbjapi().getThinClient().getClientFileSystem() 
            cf! = fs!.getClientFile(chosenDirOrFilePath!)
            cf!.copyToClient(outputFile!.getAbsolutePath())
        endif
        
        #saveConfiguration()
        #getmainWindow().destroy()
    methodend
    
    method private void saveConfiguration()
        json! = new JsonObject()
        json!.add("xlsx", new JsonObject())
        
        xlsx! = json!.getAsJsonObject("xlsx")
        xlsx!.addProperty("writeHeader", #isWriteHeaderChecked())
        
        #saveConfiguration(new Gson().toJson(json!), "xlsx")
    methodend

classend