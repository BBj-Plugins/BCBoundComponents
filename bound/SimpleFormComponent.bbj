use ::BusinessUIComponents/AbstractBCBoundWidget.bbj::AbstractBCBoundWidget
use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget
use ::BusinessUIComponents/configurations/IPropertiesManager.bbj::IPropertiesManager
use ::BusinessUIComponents/configurations/PropertiesManager.bbj::PropertiesManager
use ::BusinessUIComponents/utils/QuickSearchField.bbj::QuickSearchField

use com.basiscomponents.bc.BCBound
use com.basiscomponents.bc.BCBinder
use com.basiscomponents.bc.BusinessComponent
use com.basiscomponents.db.ResultSet
use com.basiscomponents.db.DataRow

use com.google.common.collect.BiMap
use com.google.common.collect.HashBiMap
use java.util.HashMap
use java.util.ArrayList
use java.time.LocalDateTime
use java.time.format.DateTimeFormatter

rem /**
rem  * A sample BBj Widget Implementation
rem  */
class public SimpleFormComponent extends AbstractBCBoundWidget

    field protected BBjWindow cw!
    field protected BBjVector fieldList!
    field protected BBjVector controlList!
    field protected BBjVector idControls!
    field protected BBjVector quickSearchElements! = new BBjVector()
    field protected BBjVector calendarButtons! = new BBjVector()
    field protected BiMap controlMap!
    field protected HashMap controlPrefixMap!
    field protected String quickSearchField! = "_SEARCH"
    field protected Boolean quickSearchUseWildCard! = Boolean.TRUE
REM     field private BBjColor colorFocusGained!
REM     field private BBjColor colorFocusLost!
    

    rem --------------------- constructors -------------------------------------
    
    rem /**
    rem  * disabled default constructor
    rem  */
    method private SimpleFormComponent()
    methodend

    rem /**
    rem  * The constructor that creates the widget on wnd!
    rem * @param BBjWindow wnd!: parent window
    rem * @param BBjInt id: the control ID
    rem * @param BBjInt x: x-location
    rem * @param BBjInt y: y-location
    rem * @param BBjInt w: width
    rem * @param BBjInt h: height
    rem */
    method public SimpleFormComponent(BBjWindow wnd!, BBjInt id!, BBjInt x!, BBjInt y!, BBjInt w!, BBjInt h!)
        #super!.create(wnd!,id!,x!,y!,w!,h!)
    methodend
    

    method public void setForm(BBjString res_name$, BBjNumber id)
        res = BBjAPI().getSysGui().resOpen(res_name$)
        #cw! = #getCanvas().createChildWindow(res, id, 100, 0, 0)
		#cw!.setVisible(Boolean.TRUE)
    methodend

    rem ---------------------- methods from BBjWidget -------------------------------- 

    rem /**
    rem  * @Override
    rem  * This method is called whenever the widget needs to be rendered
    rem  * @param Boolean f_init!: if TRUE the control is rendered for the first time so this method has to perform initial rendering
    rem  */
    method public void redraw(Boolean f_init!)
        if (f_init!) then
            #updateProperties()
        FI
        if (#cw! <> null()) then 
            #cw!.setSize(#getWidth(),#getHeight())
        fi
    methodend
    
    rem /**
    rem  * updating properties from properties manager
    rem  */
    method protected void updateProperties()
        #super!.updateProperties()
        it! = #calendarButtons!.iterator()
        while it!.hasNext()
            calendarButton! = it!.next()
            cast(BBjButton, calendarButton!).setImageFile(#getUIPropertiesManager().getProperty("SIMPLE_FORM_BTN_CALENDAR"))
        wend
    methodend
    
    method public void setControlMap(BiMap controlMap!)
        #controlMap! = controlMap!
    methodend
    
    method public void setControlPrefixMap(HashMap controlPrefixMap!)
        #controlPrefixMap! = controlPrefixMap!
    methodend
    
    method private BiMap getControlMap()
        if #controlMap! = null() then
            #controlMap! = #buildControlMap()
        endif
        
        methodret #controlMap!
    methodend
    
    method private BiMap buildControlMap()
        map! = HashBiMap.create()
        
        if #controlList! = null() then
            #buildFieldList()
        endif
        
        it! = #controlList!.iterator()
        attributes! = #getBinder().getAttributesRecord()
        if #controlPrefixMap! = null() then
            while it!.hasNext()
                control! = it!.next() 
                controlName$ = control!.getName()
                if attributes!.contains(controlName$) then
                    map!.put(controlName$, controlName$)
                endif
            wend
        else
            while it!.hasNext()
                control! = it!.next() 
                controlName! = control!.getName()
                controlType$ = str(control!.getControlType())
                prefix! = #controlPrefixMap!.get(controlType$)
                
                if prefix! <> null() and controlName!.startsWith(prefix!) then
                    prefixLen = prefix!.length()
                    bcFieldName! = controlName!.substring(prefixLen, controlName!.length())
                else    
                    bcFieldName! = controlName!
                endif
                
                if attributes!.contains(bcFieldName!) then
                    map!.put(controlName!, bcFieldName!)
                endif
            wend
        endif        
        methodret map!
    methodend

    method private void clearForm()
        if (#fieldList! = null()) then #buildFieldList()
        controlMap! = #getControlMap()
        
        it! = controlMap!.inverse().values().iterator()
        while it!.hasNext()
            n$=it!.next()
            control! = #getControlFromControlList(n$)
            #clearControl(control!)
        wend
        #cw!.setEnabled(1)
    methodend
    
    method private void clearControl(BBjControl control!)
        switch control!.getControlType()
            case BBjControl.LISTBUTTON_TYPE
                cast(BBjListButton, control!).deselect()
                break
            case BBjControl.CHECKBOX_TYPE
                cast(BBjCheckBox, control!).setSelected(0)
                break
            case default
                control!.setText("")
                break
        swend
    methodend

    method private void updateScreen()
        if (#cw!= null()) then methodret
        
REM         if (#fieldList! = null()) then #buildFieldList()
        
        controlMap! = #getControlMap()
        
        sel! = #getBinder().getSelection()
        
        if (sel!.size() <> 1) then
            #clearForm()
            methodret
        fi
        rs! = #getBinder().getRS()
        rowkey$ = sel!.get(0)
        rec! = rs!.get(rowkey$)
REM         it! = #fieldList!.iterator()
        it! = controlMap!.inverse().values().iterator()
        while it!.hasNext()
            n$=it!.next()
            bcFieldName$ = controlMap!.get(n$)
            control! = #getControlFromControlList(n$)
            if rec!.contains(bcFieldName$) then
                #fillControl(control!, rec!, bcFieldName$)
            else
                #clearControl(control!)
            endif
        wend
        #cw!.setEnabled(1)
        #toggleIDFieldEnabled(Boolean.FALSE)
    methodend
    
    method protected void fillControl(BBjControl control!, DataRow dr!, BBjString fieldName$)
        value! = dr!.getFieldAsString(fieldName$)
        switch control!.getControlType()
            case BBjControl.LISTBUTTON_TYPE
                vecKeys! = control!.getUserData()
                value! = value!.trim()
                if vecKeys! <> null() and vecKeys!.size() then
                    for i = 0 to vecKeys!.size() - 1
                        currentKey! = vecKeys!.get(i)
                        if currentKey!.trim().equals(value!) then
                            cast(BBjListButton, control!).selectIndex(i)
                            break
                        endif
                    next i
                endif
                cast(BBjListButton, control!).deselect()
                break
            case BBjControl.CHECKBOX_TYPE
                value! = value!.trim()
                if value!.equals("1") then value! = "true"
                selected! = Boolean.parseBoolean(value!)
                cast(BBjCheckBox, control!).setSelected(selected!)
                break
            case BBjControl.INPUTE_TYPE
                it! = #quickSearchElements!.iterator()
                isQS! = Boolean.FALSE
                while it!.hasNext()
                    qs! = cast(QuickSearchField, it!.next())
                    if qs!.getControl().equals(control!) then 
                        isQS! = Boolean.TRUE
                        break
                    endif
                wend
                if !isQS! then
                    control!.setText(value!)
                    break
                endif
                if value!.equals("") then
                    control!.setUserData(null())
                else
                    control!.setUserData(value!)
                endif
                desc! = qs!.getDescForID(value!)
                if desc! = null() then desc! = value!
                control!.setText(desc!)
                break
            case BBjControl.INPUTD_TYPE
            case BBjControl.STATIC_TEXT_TYPE
                if value!.trim().equals("") then break
                attributesRecord! = #getBinder().getAttributesRecord()
                fieldAttributes! = attributesRecord!.getFieldAttributes(fieldName$)
                if fieldAttributes!.containsKey("MASK") then
                    mask$ = fieldAttributes!.get("MASK")
                    value! = DATE(JUL(value!, "%Yd-%Mz-%Dz"):mask$)
                else
                    locale! = stbl("!LOCALE")
                    switch locale!.toUpperCase()
                        case "DE_DE"
                            dateMask$ = "dd.MM.yyyy"
                            timestampMask$ = "dd.MM.yyyy HH:mm:ss"
                        break
                        case "EN_US"
                            dateMask$ = "MM/dd/yyyy"
                            timestampMask$ = "MM/dd/yyyy hh:mm:ss"
                        break
                        case "EN_GB"
                            dateMask$ = "dd/MM/yyyy"
                            timestampMask$ = "dd/MM/yyyy hh:mm:ss"
                        break
                        case "NL_NL"
                            dateMask$ = "dd-MM-yyyy"
                            timestampMask$ = "dd-MM-yyyy HH:mm:ss"
                        break
                        case default
                            dateMask$ = "MM/dd/yyyy"
                            timestampMask$ = "MM/dd/yyyy hh:mm:ss"
                        break
                    swend
                    
                    if dr!.getFieldType(fieldName$) = java.sql.Types.DATE then
                        if value!.trim().length() = 10 then
                            value! = value! + " 00:00:00.0"
                        endif
                        datetime! = LocalDateTime.parse(value!, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.S"))
                        value! = datetime!.format(DateTimeFormatter.ofPattern(dateMask$))
                    endif
                    
                    if dr!.getFieldType(fieldName$) = java.sql.Types.TIMESTAMP then
                        datetime! = LocalDateTime.parse(value!, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.S"))
                        value! = datetime!.format(DateTimeFormatter.ofPattern(timestampMask$))
                    endif
                endif
                control!.setText(value!)
                break
            case default
                control!.setText(value!)
                break
        swend
    methodend
    
    method public void onSetData()
        #updateScreen()
    methodend

    method public void onSetSelection()
        #updateScreen()
    methodend
    
    method private BBjVector getAllControlsRecursive(BBjVector controls!, BBjWindow window!)
        currentControls! = window!.getAllControls()
        it! = currentControls!.iterator()
        while it!.hasNext()
            control! = it!.next()
            type = control!.getControlType()
            if type = BBjControl.CHILD_TYPE then
                controls! = #getAllControlsRecursive(controls!,cast(BBjChildWindow, control!))
            else
                controls!.add(control!)
            endif
        wend
        methodret controls!
    methodend
    
    method private BBjControl getControlFromControlList(String controlName!)
        it! = #controlList!.iterator()
        while it!.hasNext()
            control! = it!.next()
            name! = control!.getName()
            if name!.equals(controlName!) then
                methodret control!
            endif
        wend
        methodret null()
    methodend

    method private void buildFieldList()
        attributes! = #getBinder().getAttributesRecord()
        attrList! = attributes!.getFieldNames()
        
        #controlList! = #getAllControlsRecursive(new BBjVector(), #cw!)
        fieldList! = new BBjVector()
        
        it! = #controlList!.iterator()
        
        while it!.hasNext()
            c! = it!.next() 
            controlName$=c!.getName()

            controlMap! = #getControlMap()

            if !(controlMap!.get(controlName$) = null()) then
                fieldName$ = controlMap!.get(controlName$)
            else
                fieldName$ = ""
            endif
            
            if attrList!.contains(fieldName$) then
                fieldList!.addItem(fieldName$)
                #registerCallbacks(c!)
                #formatField(c!)
            fi
        wend
        #updateProperties()
        #fieldList! = CAST(BBjVector,fieldList!)
    methodend
    
    method public void controlChangeBackColorOnGainedFocus(BBjGainedFocusEvent ev!)
        control! = ev!.getControl()
        control!.setBackColor(#getColorFocusGained())
    methodend
    
    method public void controlChangeBackColorOnLostFocus(BBjLostFocusEvent ev!)
        control! = ev!.getControl()
        control!.setBackColor(#getColorFocusLost())
    methodend
    
    rem /**
    rem  * formats a control by parsing the attributes record and appliying those attributes.
    rem  */
    method private void formatField(BBjControl c!)
        attributes! = #getBinder().getAttributesRecord()

        controlMap! = #getControlMap()
        fieldName$ = controlMap!.get(c!.getName())

        fieldAttributes! = attributes!.getFieldAttributes(fieldName$)
        precision! = attributes!.getFieldPrecision(fieldName$)
        switch c!.getControlType()
        
            case BBjControl.INPUTE_TYPE
REM                 cast(BBjInputE, c!).setLength(precision!)
                c!.setCallback(c!.ON_GAINED_FOCUS, #this!, "controlChangeBackColorOnGainedFocus")
                c!.setCallback(c!.ON_LOST_FOCUS, #this!, "controlChangeBackColorOnLostFocus")
                #applyQuickSearch(cast(BBjInputE, c!), fieldName$, fieldAttributes!)
                break
                
            case BBjControl.INPUTN_TYPE
                c!.setCallback(c!.ON_GAINED_FOCUS, #this!, "controlChangeBackColorOnGainedFocus")
                c!.setCallback(c!.ON_LOST_FOCUS, #this!, "controlChangeBackColorOnLostFocus")
                if fieldAttributes!.containsKey("MASK") then
                    mask! = fieldAttributes!.get("MASK")
                    cast(BBjInputN, c!).setMask(mask!)
                else
                    if num(precision!) < 1 then break
                    scale = 0
                    if fieldAttributes!.containsKey("Scale") then
                        scale = num(fieldAttributes!.get("Scale"))
                    endif
                    beforeComma = num(precision!) - scale
                    oldMask! = cast(BBjInputN, c!).getMask()
                    rem if old mask of the control had a specific number of digits after dot defined, then use this instead
                    if oldMask!.contains(cast(BBjInputN, c!).getDotCharacter()) then
                        oldScale = oldMask!.substring(oldMask!.indexOf(cast(BBjInputN, c!).getDotCharacter())).length() - 1
                        if oldScale < scale then scale = oldScale
                    endif
                    if scale > 0 then
                        mask! = fill(beforeComma - 1,"#") + "0" + cast(BBjInputN, c!).getDotCharacter() + fill(scale, "#")
                    else
                        mask! = fill(beforeComma,"#")
                    endif
                    rem add '-' to mask if negatable
                    if fieldAttributes!.containsKey("Signed") then
                        signed! = fieldAttributes!.get("Signed")
                        if signed!.equals("1") then
                            mask! = "-" + mask!
                        endif
                    endif
                    cast(BBjInputN, c!).setMask(mask!)
                endif
                break
                
            case BBjControl.INPUTD_TYPE
                if fieldAttributes!.containsKey("MASK") then
                    mask! = fieldAttributes!.get("MASK")
                else
                    locale! = stbl("!LOCALE")
                    switch locale!.toUpperCase()
                        case "DE_DE"
                            mask! = "%Dz.%Mz.%Y"
                        break
                        case "EN_US"
                            mask! = "%Mz/%Dz/%Y"
                        break
                        case "EN_GB"
                            mask! = "%Dz/%Mz/%Y"
                        break
                        case "NL_NL"
                            mask! = "%Dz-%Mz-%Y"
                        break
                        case default
                            mask! = "%Mz/%Dz/%Y"
                        break
                    swend
                endif
                cast(BBjInputD, c!).setMask(mask!)
                #addCalendarButton(cast(BBjInputD, c!))
                break
            case BBjControl.LISTBUTTON_TYPE
                #applyLookupForListEdit(cast(BBjListButton, c!),fieldAttributes!)
                break
            case default
                break
        swend
    methodend
    
    method private void applyQuickSearch(BBjInputE control!, String fieldName!, HashMap fieldAttributes!)
        if !fieldAttributes!.containsKey("LOOKUP") then methodret
        sel! = #getBinder().getSelection()
        if (sel!.size() = 1) then
            rsBinder! = #getBinder().getRS()
            rowkey$ = sel!.get(0)
            selDr! = rsBinder!.get(rowkey$)
        else
            selDr! = null()
        fi
        rem try to call getLookup(). when it does not work or is empty, try to call getLookupData. if neither brings results, methodret.
        lookup! = cast(BusinessComponent, #getBinder().getBC()).getLookup(fieldName!, selDr!, err=*next)
        if lookup! = null() then methodret
        qs! = new QuickSearchField(control!, lookup!)
        qs!.setBinder(#getBinder())
        qs!.setSearchFieldName(#quickSearchField!)
        qs!.setUseWildCard(#quickSearchUseWildCard!)
        #quickSearchElements!.add(qs!)
    methodend
    
    rem /**
    rem  * default is "_SEARCH"
    rem  */
    method public void setQuickSearchFieldName(String quickSearchField!)
        #quickSearchField! = quickSearchField!
        it! = #quickSearchElements!.iterator()
        while it!.hasNext()
            qs! = cast(QuickSearchField, it!.next())
            qs!.setSearchFieldName(quickSearchField!)
        wend
    methodend
    
    rem /**
    rem  * default is TRUE
    rem  */
    method public void setQuickSearchUseWildCard(Boolean useWildCard!)
        #quickSearchUseWildCard! = useWildCard!
        it! = #quickSearchElements!.iterator()
        while it!.hasNext()
            qs! = cast(QuickSearchField, it!.next())
            qs!.setUseWildCard(useWildCard!)
        wend
    methodend
    
    rem /**
    rem  * calls retrieveLookup and tries to apply resultset to listbutton
    rem  */
    method private void applyLookupForListEdit(BBjListButton control!, HashMap fieldAttributes!)
        if !fieldAttributes!.containsKey("LOOKUP") or !fieldAttributes!.get("LOOKUP").equals("1") then methodret
        fieldName! = #getFieldNameForControl(control!)
        if fieldName! = "" then methodret
        control!.removeAllItems()
        rem get selected row for lookup when one item is selected
        sel! = #getBinder().getSelection()
        if (sel!.size() = 1) then
            rsBinder! = #getBinder().getRS()
            rowkey$ = sel!.get(0)
            selDr! = rsBinder!.get(rowkey$)
        else
            selDr! = null()
        fi
        rem try to call getLookup(). when it does not work or is empty, try to call getLookupData. if neither brings results, methodret.
        lookup! = cast(BusinessComponent, #getBinder().getBC()).getLookup(fieldName!, selDr!, err=*next)
        if lookup! = null() then 
            rs! = cast(BusinessComponent, #getBinder().getBC()).getLookupData(fieldName!, selDr!, err=*next)
            if rs! = null() or rs!.isEmpty() then methodret
            lookupAttributes! = rs!.get(0)
        else
            rs! = lookup!.retrieve(err=*next)
            if rs! = null() or rs!.isEmpty() then methodret
            lookupAttributes! = lookup!.getAttributesRecord()
        endif
REM         rs! = cast(BusinessComponent, #getBinder().getBC()).getLookupData(fieldName!, selDr!)
        ids! = lookupAttributes!.getFieldsHavingAttributeValue("EDITABLE", "2")
REM         ids! = rs!.get(0).getFieldsHavingAttributeValue("EDITABLE", "2")
        if !ids!.isEmpty() then
            idNames! = ids!.getFieldNames()
        else
            idNames! = new BBjVector()
            idNames!.add(rs!.get(0).getColumnName(0))
        endif
        if rs!.getColumnIndex("DESC") >= 0 then
            hasDesc! = Boolean.TRUE
        else
            hasDesc! = Boolean.FALSE
        endif
        vectorKeys! = new BBjVector()
        vectorValues! = new BBjVector()
        itResultSet! = rs!.iterator()
        while itResultSet!.hasNext()
            dr! = itResultSet!.next()
            idField! = new StringBuilder()
            itIDNames! = idNames!.iterator()
            while itIDNames!.hasNext()
                idName! = itIDNames!.next()
                idField!.append(dr!.getFieldAsString(idName!))
                if itIDNames!.hasNext() then idField!.append($00$)
            wend
            idField! = idField!.toString()
            vectorKeys!.add(idField!)
            if hasDesc! then
                vectorValues!.add(dr!.getFieldAsString("DESC"))
            else
                vectorValues!.add(idField! + ": no DESC")
            endif
        wend
        control!.setUserData(vectorKeys!)
        control!.insertItems(0, vectorValues!)
    methodend
    
    method private void addCalendarButton(BBjInputD control!)
        calendarButton! = #getCanvas().addButton(#getCanvas().getAvailableControlID(), control!.getX() + control!.getWidth() - control!.getHeight() + 1, control!.getY() + 1, control!.getHeight() - 2, control!.getHeight() - 2, "")
        #calendarButtons!.add(calendarButton!)
REM         calendarButton!.setImageFile("BusinessUIComponents/icon/ic_insert_invitation_black_24dp.png")
        calendarButton!.setImageSize(control!.getHeight() - 6,control!.getHeight() - 6)
        calendarButton!.setUserData(control!)
        calendarButton!.setCallback(BBjAPI.ON_BUTTON_PUSH,#this!,"onCalendarButtonPush") 
    methodend
    
    method private void registerCallbacks(BBjControl c!)
        switch c!.getControlType()
            case BBjControl.INPUTE_TYPE
            case BBjControl.INPUTN_TYPE
            case BBjControl.INPUTD_TYPE
                c!.setCallback(BBjAPI.ON_EDIT_MODIFY,#this!,"onControlEditModify") 
                break
            case BBjControl.LISTBUTTON_TYPE
            case BBjControl.LISTEDIT_TYPE
                c!.setCallback(BBjAPI.ON_LIST_SELECT,#this!,"onControlListSelect") 
                break
            case default
                c!.setCallback(BBjAPI.ON_GAINED_FOCUS,#this!,"onControlGainedFocus",err=*next) 
                break
        swend
    methodend
    
    method public void setBinder(BCBinder binder!)
        #super!.setBinder(binder!)
    methodend
    
    method public void onControlGainedFocus(BBjGainedFocusEvent ev!)
        #getBinder().sendSignal(BCBinder.SIGNAL_DIRTY)
    methodend
    
    method public void onCalendarButtonPush(BBjButtonPushEvent ev!)
        control! = ev!.getControl()
        inputD! = control!.getUserData()
        cast(BBjInputD, inputD!).calendar()
    methodend
    
    method public void onControlEditModify(BBjEditModifyEvent ev!)
        #getBinder().sendSignal(BCBinder.SIGNAL_DIRTY)
    methodend
    
    method public void onControlListSelect(BBjListSelectEvent ev!)
        #getBinder().sendSignal(BCBinder.SIGNAL_DIRTY)
    methodend
    
    rem returns the bc-fieldname linked to the control or "" when unlinked
    method public String getFieldNameForControl(BBjControl control!)
        controlName! = control!.getName()
        if #getControlMap().containsKey(controlName!) then
            methodret cast(String, #getControlMap().get(controlName!))
        endif
        if #fieldList!.contains(controlName!) then
            methodret controlName!
        endif
        methodret ""
    methodend
    
    rem /**
    rem  * returns the fields of the form with its values as a datarow, if the controlnames correlate to fields in the atributes record
    rem  */
    method public DataRow getFieldsForWrite()
    rem if not enabled: do not return any fields
        if !#cw!.isEnabled() then methodret new DataRow()
        sel! = #getBinder().getSelection()
        
        if (sel!.size() <> 1) then
            rec! = #getBinder().getAttributesRecord().clone()
            rec!.clear()
        else
            rs! = #getBinder().getRS()
            rowkey$ = sel!.get(0)
            rec! = rs!.get(rowkey$)
        endif
        dr! = new DataRow()
        controlMap! = #getControlMap()
        it! = controlMap!.values().iterator()
        rem add all control values where control name = field name in attributes record and editable = 1 or 2
        attributes! = #getBinder().getAttributesRecord()
        while it!.hasNext()
            field$ = it!.next() 
            editable! = "0"; editable! = attributes!.getFieldAttribute(field$, "EDITABLE",err=*next)
            if !editable!.equals("1") and !editable!.equals("2") then continue;rem only editable fields for to be added
            control! = #getControlFromControlList(controlMap!.inverse().get(field$))
            value! = #getValueFromControl(control!)
            dr!.setFieldValue(field$, attributes!.getFieldType(field$), value!)
        wend
        
        fieldNames! = rec!.getFieldNames()
        writeDR! = new DataRow()
        
        for i = 0 to fieldNames!.size()-1
            fieldName! = fieldNames!.get(i)
            editable! = "0"; editable! = attributes!.getFieldAttribute(fieldName!, "EDITABLE",err=*next)
            if !editable!.equals("1") and !editable!.equals("2") then continue
            if dr!.contains(fieldName!)then
                if editable!.equals("2") then
                    writeDR!.setFieldValue(fieldName!, dr!.getFieldAsString(fieldName!))
                endif
                if !rec!.getFieldAsString(fieldName!).equals(dr!.getFieldAsString(fieldName!)) then
                    writeDR!.setFieldValue(fieldName!, dr!.getFieldAsString(fieldName!))
                endif
            endif
        next i
        
        methodret writeDR!
    methodend
    
    method protected String getValueFromControl(BBjControl control!)
        controlType = control!.getControlType()
        switch controlType
            case BBjControl.INPUTE_TYPE
                rem userdata is used for quicksearch
                userData! = control!.getUserData()
                if userData! <> null() then
                    methodret userData!
                else
                    methodret control!.getText()
                endif
                break
            case BBjControl.LISTBUTTON_TYPE
                listEdit! = cast(BBjListButton, control!)
                selIndex = listEdit!.getSelectedIndex()
                if selIndex < 0 then methodret ""
                if listEdit!.getUserData() = null() then
                    methodret listEdit!.getItemAt(selIndex)
                endif
                vectorKeys! = listEdit!.getUserData()
                methodret vectorKeys!.get(selIndex)
                break
            case BBjControl.CHECKBOX_TYPE
                selected! = cast(BBjCheckBox, control!).isSelected()
                if selected! then
                    methodret "1"
                else
                    methodret "0"
                endif
                break
            case default
                methodret control!.getText()
                break
        swend
    methodend
    
    method protected void toggleIDFieldEnabled(Boolean enabled!)
        idControls! = #getIDControls()
        it! = idControls!.iterator()
        while it!.hasNext()
            idControl! = it!.next()
            idControl!.setEnabled(enabled!)
        wend
    methodend
    
    method protected BBjVector getIDControls()
        if #idControls! <> null() then methodret #idControls!
        if #controlList! = null() then methodret new BBjVector()
        attrRecord! = #getBinder().getBC().getAttributesRecord()
        ids! = attrRecord!.getFieldsHavingAttributeValue("EDITABLE", "2")
        if ids!.isEmpty() then methodret new BBjVector()
        idNames! = ids!.getFieldNames()
        it! = #controlList!.iterator()
        idControls! = new BBjVector()
        while it!.hasNext()
            control! = it!.next()
            fieldName! = #getFieldNameForControl(control!)
            if idNames!.contains(fieldName!) then
                idControls!.add(control!)
            endif
        wend
        #idControls! = cast(BBjVector, idControls!)
        methodret idControls!
    methodend
    
    method protected void focusFirstIDField()
        idControls! = #getIDControls()
        if idControls!.size() < 1 then methodret
        firstID! = idControls!.get(0)
        if firstID!.isEnabled() then
            firstID!.focus()
        endif
    methodend
    
    method public void onSignal(int signal!, Object payload!)
        binder! = #getBinder()
        switch signal!
            case binder!.SIGNAL_NEW
                #clearForm()
                #toggleIDFieldEnabled(Boolean.TRUE)
                #focusFirstIDField()
                break
            case default
                break
        swend
    methodend

classend