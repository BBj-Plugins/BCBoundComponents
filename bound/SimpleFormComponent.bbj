use ::BusinessUIComponents/bound/AbstractBCBoundWidget.bbj::AbstractBCBoundWidget
use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget
use ::BusinessUIComponents/configurations/IPersistentState.bbj::IPersistentState
use ::BusinessUIComponents/bound/BCQuickSearch.bbj::BCQuickSearch
use com.basiscomponents.bc.BCBound
use com.basiscomponents.bc.BCBinder
use com.basiscomponents.bc.BusinessComponent
use com.basiscomponents.db.ResultSet
use com.basiscomponents.db.DataRow
use com.google.common.collect.BiMap
use com.google.common.collect.HashBiMap
use java.util.HashMap
use java.util.ArrayList
use java.time.LocalDateTime
use java.time.format.DateTimeFormatter
use com.basiscomponents.ui.layout.dwc.DWCLayout

class public SimpleFormComponent extends AbstractBCBoundWidget implements IPersistentState

    field protected BBjWindow cw!
    field protected BBjVector fieldList!
    field protected BBjVector controlList!
    field protected BBjVector idControls!
    field protected BBjVector calendarButtons! = new BBjVector()
    field protected BiMap controlMap!
    field protected HashMap allControls! 
    field protected HashMap controlPrefixMap!
    field protected String quickSearchField! = "_SEARCH"
    field protected Boolean quickSearchUseWildCard! = Boolean.TRUE
    field protected Boolean listButtonFirstRowEmpty! = Boolean.FALSE
    rem --------------------- constructors -------------------------------------
    rem /**
    rem  * disabled default constructor
    rem  */
    method private SimpleFormComponent()
    methodend
    rem /**
    rem  * The constructor that creates the widget on wnd!
    rem * @param BBjWindow wnd!: parent window
    rem * @param BBjInt id: the control ID
    rem * @param BBjInt x: x-location
    rem * @param BBjInt y: y-location
    rem * @param BBjInt w: width
    rem * @param BBjInt h: height
    rem */
    method public SimpleFormComponent(BBjWindow wnd!, BBjInt id!, BBjInt x!, BBjInt y!, BBjInt w!, BBjInt h!)
        #super!.create(wnd!,id!,x!,y!,w!,h!)
    methodend
    
    method public SimpleFormComponent(BBjWindow wnd!)
        #super!.create(CAST(BBjChildWindow,wnd!))
    methodend    
    
    method public void setDWCForm(BBjString res_name$)
        #cw! = #getCanvas()
        ch=unt
        open (ch)res_name$
        read record (ch,siz=dec(fin(ch)(1,4))+10)json$
        close (ch)
        
        wh! = new ::WebKit/util/DWCWidgetHelper.bbj::DWCWidgetHelper()
        com.basiscomponents.ui.layout.dwc.BBjWidgetPod.setBBjWidgetHelper(wh!)


        layout! = DWCLayout.fromJson(json$)
        #allControls! = CAST(HashMap,layout!.render(#cw!,BBjAPI().getSysGui()))
        #cw!.setName("FORMCW")
        #cw!.setStyle("overflow","unset")
        #cw!.setVisible(Boolean.TRUE)
    methodend
    
    rem ---------------------- methods from BBjWidget --------------------------------
    rem /**
    rem  * @Override
    rem  * This method is called whenever the widget needs to be rendered
    rem  * @param Boolean f_init!: if TRUE the control is rendered for the first time so this method has to perform initial rendering
    rem  */
    method public void redraw(Boolean f_init!)
        if (f_init!) then
            
        endif
    methodend

    method public void setListButtonFirstRowEmpty(Boolean listButtonFirstRowEmpty!)
        #listButtonFirstRowEmpty! = listButtonFirstRowEmpty!
    methodend

    method public void setControlMap(BiMap controlMap!)
        #controlMap! = controlMap!
    methodend

    method public void setControlPrefixMap(HashMap controlPrefixMap!)
        #controlPrefixMap! = controlPrefixMap!
    methodend

    method protected BiMap getControlMap()
        if #controlMap! = null() then
            #buildControlMap()
        endif

        methodret #controlMap!
    methodend

    method public void buildControlMap()
        map! = HashBiMap.create()

        if #controlList! = null() then
            #buildFieldList()
        endif

        it! = #controlList!.iterator()
        attributes! = #getBinder().getAttributesRecord()

        if #controlPrefixMap! = null() then
            while it!.hasNext()
                control! = it!.next()
                controlName$ = control!.getName()
                if attributes!.contains(controlName$) then
                    map!.put(controlName$, controlName$)
                endif
            wend
        else
            while it!.hasNext()
                control! = it!.next()
                controlName! = control!.getName()
                controlType$ = str(control!.getControlType())
                prefix! = #controlPrefixMap!.get(controlType$)

                if prefix! <> null() and controlName!.startsWith(prefix!) then
                    prefixLen = prefix!.length()
                    bcFieldName! = controlName!.substring(prefixLen, controlName!.length())
                else
                    bcFieldName! = controlName!
                endif

                if attributes!.contains(bcFieldName!) then
                    map!.put(controlName!, bcFieldName!)
                endif
            wend
        endif

        #controlMap! = cast(BiMap, map!)
    methodend

    method protected void clearForm()
        if (#fieldList! = null()) then
            #buildFieldList()
        endif

        controlMap! = #getControlMap()
        it! = controlMap!.inverse().values().iterator()
        while it!.hasNext()
            n$=it!.next()
            control! = #getControlFromControlList(n$)
            #clearControl(control!)
        wend

        #cw!.setEnabled(1)
        rem BBjAPI().getBuiManager().setShowConfirmCloseDialog(0,err=*next)
    methodend

    method protected void clearControl(BBjControl control!)
    
        switch control!.getControlType()
            case BBjControl.LISTBUTTON_TYPE
                cast(BBjListButton, control!).deselect()
                break
            case BBjControl.LISTBOX_TYPE
                cast(BBjListBox, control!).deselectAll()
                break
                
            case BBjControl.CHECKBOX_TYPE
                cast(BBjCheckBox, control!).setSelected(0)
                break
            case default
                control!.setText("")
                break
        swend
    methodend

    method protected void updateScreen()
        if (#cw!= null()) then
            methodret
        endif

        controlMap! = #getControlMap()
        sel! = #getBinder().getSelection()

        if (sel!.size() <> 1) then
            #clearForm()
            methodret
        endif

        rs! = #getBinder().getRS()
        rowkey$ = sel!.get(0)
        rec! = rs!.get(rowkey$)

        it! = controlMap!.inverse().values().iterator()
        while it!.hasNext()
            n$=it!.next()
            bcFieldName$ = controlMap!.get(n$)
            control! = #getControlFromControlList(n$)

            if rec!.contains(bcFieldName$) then
                #fillControl(control!, rec!, bcFieldName$)
            else
                #clearControl(control!)
            endif
        wend

        #cw!.setEnabled(1)
        #toggleIDFieldEnabled(Boolean.FALSE)
        rem BBjAPI().getBuiManager().setShowConfirmCloseDialog(0,err=*next)
    methodend

    method protected void fillControl(BBjControl control!, DataRow dr!, BBjString fieldName$)
        value! = dr!.getFieldAsString(fieldName$)
        switch control!.getControlType()
            case BBjControl.LISTBUTTON_TYPE
                vecKeys! = control!.getUserData()
                value! = value!.trim()

                if vecKeys! <> null() and vecKeys!.size() then
                    cast(BBjListButton, control!).deselect()
                    for i = 0 to vecKeys!.size() - 1
                        currentKey! = vecKeys!.get(i)
                        if currentKey!.trim().equals(value!.trim()) then
                            cast(BBjListButton, control!).selectIndex(i)
                            break
                        endif
                    next i
                endif

                break
            case BBjControl.LISTBOX_TYPE
                vecKeys! = control!.getUserData()
                value! = value!.trim()

                if vecKeys! <> null() and vecKeys!.size() then
                    cast(BBjListBox, control!).deselectAll()
                    seltmp$ = value!.trim()
                    selset! = new BBjVector()
                    for i = 0 to vecKeys!.size() - 1
                        currentKey$ = vecKeys!.get(i)
                        if pos(currentKey$=seltmp$)>0 then
                            selset!.addItem(i)
                        fi
                    next i
                    cast(BBjListBox, control!).setSelectedIndices(selset!)
                endif

                break                
            case BBjControl.CHECKBOX_TYPE
                value! = value!.trim()

                if value!.equals("1") then
                    value! = "true"
                endif

                selected! = Boolean.parseBoolean(value!)
                cast(BBjCheckBox, control!).setSelected(selected!)
                break

            case BBjControl.INPUTD_TYPE

            case BBjControl.STATIC_TEXT_TYPE
                if value!.trim().equals("") then
                    break
                endif

                attributesRecord! = #getBinder().getAttributesRecord()
                fieldAttributes! = attributesRecord!.getFieldAttributes(fieldName$)

                if fieldAttributes!.containsKey("MASK") then
                    mask$ = fieldAttributes!.get("MASK")
                    if dr!.getFieldType(fieldName$) = java.sql.Types.NUMERIC then
                        value! = DATE(NUM(value!):mask$)
                    else
                        value! = DATE(JUL(value!, "%Yd-%Mz-%Dz"):mask$)
                    endif
                else
                    locale! = stbl("!LOCALE")
                    switch locale!.toUpperCase()
                        case "DE_DE"
                            dateMask$ = "dd.MM.yyyy"
                            timestampMask$ = "dd.MM.yyyy HH:mm:ss"
                            break
                        case "EN_US"
                            dateMask$ = "MM/dd/yyyy"
                            timestampMask$ = "MM/dd/yyyy hh:mm:ss"
                            break
                        case "EN_GB"
                            dateMask$ = "dd/MM/yyyy"
                            timestampMask$ = "dd/MM/yyyy hh:mm:ss"
                            break
                        case "NL_NL"
                            dateMask$ = "dd-MM-yyyy"
                            timestampMask$ = "dd-MM-yyyy HH:mm:ss"
                            break
                        case default
                            dateMask$ = "MM/dd/yyyy"
                            timestampMask$ = "MM/dd/yyyy hh:mm:ss"
                            break
                    swend


                    if dr!.getFieldType(fieldName$) = java.sql.Types.DATE then
                        if value!.trim().length() = 10 then
                            value! = value! + " 00:00:00.0"
                        endif

                        datetime! = LocalDateTime.parse(value!, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.S"))
                        value! = datetime!.format(DateTimeFormatter.ofPattern(dateMask$))
                        
                    endif

                    if dr!.getFieldType(fieldName$) = java.sql.Types.TIMESTAMP then
                        datetime! = LocalDateTime.parse(value!, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.S"))
                        value! = datetime!.format(DateTimeFormatter.ofPattern(timestampMask$))
                    endif
                    
                    if dr!.getFieldType(fieldName$) = java.sql.Types.NUMERIC then
                        value! = date(num(value!))
                        if value!.trim().length() = 10 then
                            value! = value! + " 00:00:00.0"
                        endif

                        datetime! = LocalDateTime.parse(value!, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.S"))
                        value! = datetime!.format(DateTimeFormatter.ofPattern(dateMask$))
                    endif
                endif

                control!.setText(value!)
                break
            case default
                control!.setText(value!)
                break
        swend
    methodend

    method public void onSetData()
        #updateScreen()
    methodend

    method public void onSetSelection()
        #updateScreen()
    methodend

    method protected BBjControl getControlFromControlList(String controlName!)
        it! = #controlList!.iterator()
        while it!.hasNext()
            control! = it!.next()
            name! = control!.getName()

            if name!.equals(controlName!) then
                methodret control!
            endif
        wend

        methodret null()
    methodend

    method protected void buildFieldList()
        attributes! = #getBinder().getAttributesRecord()
        attrList! = attributes!.getFieldNames()
        
        it! = #allControls!.keySet().iterator()
        #controlList! = new BBjVector()
        while it!.hasNext()
            #controlList!.add(#allControls!.get(it!.next()))
        wend
        
        fieldList! = new BBjVector()
        controlMap! = #getControlMap()
        
        it! = #controlList!.iterator()
        
        while it!.hasNext()
            c! = it!.next()
            controlName$=c!.getName()

            if !(controlMap!.get(controlName$) = null()) then
                fieldName$ = controlMap!.get(controlName$)
            else
                fieldName$ = ""
            endif

            if attrList!.contains(fieldName$) then
                fieldList!.addItem(fieldName$)
                #registerCallbacks(c!)
                #formatField(c!)
            endif

            if pos(".label"=controlName$)>0 then
                orig_name$=controlName$(1,pos(".label"=controlName$)-1)
                if attrList!.contains(orig_name$) AND attributes!.contains(orig_name$) then
                    lbl$=""
                    lbl$ = attributes!.getFieldAttribute(orig_name$,"LABEL",err=*next)
                    if lbl$>"" then
                        c!.setText(lbl$)
                    else
                        c!.setText(orig_name$)
                    fi
                fi
            fi
        wend

        #fieldList! = CAST(BBjVector,fieldList!)
    methodend

    rem /**
    rem  * formats a control by parsing the attributes record and appliying those attributes.
    rem  */
    method protected void formatField(BBjControl c!)
        attributes! = #getBinder().getAttributesRecord()
        controlMap! = #getControlMap()
        fieldName$ = controlMap!.get(c!.getName())
        fieldAttributes! = attributes!.getFieldAttributes(fieldName$)
        precision! = attributes!.getFieldPrecision(fieldName$)
        switch c!.getControlType()
            case BBjControl.INPUTE_TYPE
                break
            case BBjControl.INPUTN_TYPE

                if fieldAttributes!.containsKey("MASK") then
                    mask! = fieldAttributes!.get("MASK")
                    cast(BBjInputN, c!).setMask(mask!)
                else
                    if num(precision!) < 1 then
                        break
                    endif

                    scale = 0

                    if fieldAttributes!.containsKey("Scale") then
                        scale = num(fieldAttributes!.get("Scale"))
                    endif

                    beforeComma = num(precision!) - scale
                    oldMask! = cast(BBjInputN, c!).getMask()
                    rem if old mask of the control had a specific number of digits after dot defined, then use this instead
                    if oldMask!.contains(cast(BBjInputN, c!).getDotCharacter()) then
                        oldScale = oldMask!.substring(oldMask!.indexOf(cast(BBjInputN, c!).getDotCharacter())).length() - 1

                        if oldScale < scale then
                            scale = oldScale
                        endif
                    endif

                    if scale > 0 then
                        mask! = fill(beforeComma - 1,"#") + "0" + cast(BBjInputN, c!).getDotCharacter() + fill(scale, "#")
                    else
                        mask! = fill(beforeComma,"#")
                    endif
                    rem add '-' to mask if negatable
                    if fieldAttributes!.containsKey("Signed") then
                        signed! = fieldAttributes!.get("Signed")

                        if signed!.equals("1") then
                            mask! = "-" + mask!
                        endif
                    endif

                    cast(BBjInputN, c!).setMask(mask!)
                endif

                break
            case BBjControl.INPUTD_TYPE
                if fieldAttributes!.containsKey("MASK") then
                    mask! = fieldAttributes!.get("MASK")
                else
                    locale! = stbl("!LOCALE")
                    switch locale!.toUpperCase()
                        case "DE_DE"
                            mask! = "%Dz.%Mz.%Yl"
                            break
                        case "EN_US"
                            mask! = "%Mz/%Dz/%Yl"
                            break
                        case "EN_GB"
                            mask! = "%Dz/%Mz/%Yl"
                            break
                        case "NL_NL"
                            mask! = "%Dz-%Mz-%Yl"
                            break
                        case default
                            mask! = "%Mz/%Dz/%Yl"
                            break
                    swend
                endif

                cast(BBjInputD, c!).setMask(mask!)
                c!.setAttribute("show-weeks","1")
                c!.setAttribute("visible-calender-icon","1")

                break
            case BBjControl.LISTBUTTON_TYPE
                #applyLookupForListButton(cast(BBjListButton, c!),fieldAttributes!)
                break
            case BBjControl.LISTBOX_TYPE
                #applyLookupForListBox(cast(BBjListBox, c!),fieldAttributes!)
                break                
            case default
                class$=str(c!)
                if pos("::BCQuickSearch"=class$)>0 then 
                    rem #applyQuickSearch(cast(BBjInputE, c!), fieldName$, fieldAttributes!)
                    sel! = #getBinder().getSelection()
            
                    if (sel!.size() = 1) then
                        rsBinder! = #getBinder().getRS()
                        rowkey$ = sel!.get(0)
                        selDr! = rsBinder!.get(rowkey$)
                    else
                        selDr! = null()
                    endif                    
                    lookup! = cast(BusinessComponent, #getBinder().getBC()).getLookup(fieldName$, selDr!, err=*next)
                    if lookup!<> null() then
                        cast(BCQuickSearch,c!).setBC(lookup!)
                    fi
                    
                fi
                break
        swend
        
    methodend

REM     method protected void applyQuickSearch(BBjInputE control!, String fieldName!, HashMap fieldAttributes!)
REM         if !fieldAttributes!.containsKey("LOOKUP") then
REM             methodret
REM         endif
REM 
REM         sel! = #getBinder().getSelection()
REM 
REM         if (sel!.size() = 1) then
REM             rsBinder! = #getBinder().getRS()
REM             rowkey$ = sel!.get(0)
REM             selDr! = rsBinder!.get(rowkey$)
REM         else
REM             selDr! = null()
REM         endif
REM         rem try to call getLookup(). when it does not work or is empty, try to call getLookupData. if neither brings results, methodret.
REM         lookup! = cast(BusinessComponent, #getBinder().getBC()).getLookup(fieldName!, selDr!, err=*next)
REM 
REM         if lookup! = null() then
REM             methodret
REM         endif
REM 
REM         qs! = new QuickSearchField(control!, lookup!)
REM         qs!.setBinder(#getBinder())
REM         qs!.setSearchFieldName(#quickSearchField!)
REM         qs!.setUseWildCard(#quickSearchUseWildCard!)
REM         #quickSearchElements!.add(qs!)
REM     methodend
REM 
REM 
REM     rem /**
REM     rem  * default is "_SEARCH"
REM     rem  */
REM     method public void setQuickSearchFieldName(String quickSearchField!)
REM         #quickSearchField! = quickSearchField!
REM         it! = #quickSearchElements!.iterator()
REM         while it!.hasNext()
REM             qs! = cast(QuickSearchField, it!.next())
REM             qs!.setSearchFieldName(quickSearchField!)
REM         wend
REM     methodend
REM     rem /**
REM     rem  * default is TRUE
REM     rem  */
REM     method public void setQuickSearchUseWildCard(Boolean useWildCard!)
REM         #quickSearchUseWildCard! = useWildCard!
REM         it! = #quickSearchElements!.iterator()
REM         while it!.hasNext()
REM             qs! = cast(QuickSearchField, it!.next())
REM             qs!.setUseWildCard(useWildCard!)
REM         wend
REM     methodend


    rem /**
    rem  * calls retrieveLookup and tries to apply resultset to listbutton
    rem  */
    method protected void applyLookupForListButton(BBjListButton control!, HashMap fieldAttributes!)
        if !fieldAttributes!.containsKey("LOOKUP") or !fieldAttributes!.get("LOOKUP").equals("1") then
            methodret
        endif

        fieldName! = #getFieldNameForControl(control!)

        if fieldName! = "" then
            methodret
        endif

        control!.removeAllItems()
        rem get selected row for lookup when one item is selected
        sel! = #getBinder().getSelection()

        if (sel!.size() = 1) then
            rsBinder! = #getBinder().getRS()
            rowkey$ = sel!.get(0)
            selDr! = rsBinder!.get(rowkey$)
        else
            selDr! = null()
        endif
        rem try to call getLookup(). when it does not work or is empty, try to call getLookupData. if neither brings results, methodret.
        lookup! = cast(BusinessComponent, #getBinder().getBC()).getLookup(fieldName!, selDr!, err=*next)

        if lookup! = null() then
            rs! = cast(BusinessComponent, #getBinder().getBC()).getLookupData(fieldName!, selDr!, err=*next)

            if rs! = null() or rs!.isEmpty() then
                methodret
            endif

            lookupAttributes! = rs!.get(0)
        else
            rs! = lookup!.retrieve(err=*next)

            if rs! = null() or rs!.isEmpty() then
                methodret
            endif

            lookupAttributes! = lookup!.getAttributesRecord()
        endif
        REM         rs! = cast(BusinessComponent, #getBinder().getBC()).getLookupData(fieldName!, selDr!)
        ids! = lookupAttributes!.getFieldsHavingAttributeValue("EDITABLE", "2")
        REM         ids! = rs!.get(0).getFieldsHavingAttributeValue("EDITABLE", "2")
        if !ids!.isEmpty() then
            idNames! = ids!.getFieldNames()
        else
            idNames! = new BBjVector()
            idNames!.add(rs!.get(0).getColumnName(0))
        endif

        desc$ = "" 
        if rs!.getColumnIndex("DESC") >= 0 then
            desc$="DESC"
        else
            if rs!.getColumnIndex("desc") >= 0 then
                desc$="desc"
            endif
        endif

        vectorKeys! = new BBjVector()
        vectorValues! = new BBjVector()

        if #listButtonFirstRowEmpty! then
            vectorKeys!.add("")
            vectorValues!.add("")
        endif

        itResultSet! = rs!.iterator()
        while itResultSet!.hasNext()
            dr! = itResultSet!.next()
            idField! = new StringBuilder()
            itIDNames! = idNames!.iterator()
            while itIDNames!.hasNext()
                idName! = itIDNames!.next()
                idField!.append(dr!.getFieldAsString(idName!))

                if itIDNames!.hasNext() then
                    idField!.append($00$)
                endif
            wend

            idField! = idField!.toString()
            vectorKeys!.add(idField!)

            if desc$>"" then
                vectorValues!.add(dr!.getFieldAsString(desc$))
            else
                vectorValues!.add(idField! + ": no DESC")
            endif
        wend

        control!.setUserData(vectorKeys!)
        control!.insertItems(0, vectorValues!)
    methodend


    rem /**
    rem  * calls retrieveLookup and tries to apply resultset to listbutton
    rem  */
    method protected void applyLookupForListBox(BBjListBox control!, HashMap fieldAttributes!)
        if !fieldAttributes!.containsKey("LOOKUP") or (!fieldAttributes!.get("LOOKUP").equals("1") and !fieldAttributes!.get("LOOKUP").equals("2")) then
            methodret
        endif

        fieldName! = #getFieldNameForControl(control!)

        if fieldName! = "" then
            methodret
        endif

        control!.removeAllItems()
        
        control!.setMultipleSelection(fieldAttributes!.get("LOOKUP").equals("2"))
        
        rem get selected row for lookup when one item is selected
        sel! = #getBinder().getSelection()

        if (sel!.size() = 1) then
            rsBinder! = #getBinder().getRS()
            rowkey$ = sel!.get(0)
            selDr! = rsBinder!.get(rowkey$)
        else
            selDr! = null()
        endif
        rem try to call getLookup(). when it does not work or is empty, try to call getLookupData. if neither brings results, methodret.
        lookup! = cast(BusinessComponent, #getBinder().getBC()).getLookup(fieldName!, selDr!, err=*next)

        if lookup! = null() then
            rs! = cast(BusinessComponent, #getBinder().getBC()).getLookupData(fieldName!, selDr!, err=*next)

            if rs! = null() or rs!.isEmpty() then
                methodret
            endif

            lookupAttributes! = rs!.get(0)
        else
            rs! = lookup!.retrieve(err=*next)

            if rs! = null() or rs!.isEmpty() then
                methodret
            endif

            lookupAttributes! = lookup!.getAttributesRecord()
        endif
        REM         rs! = cast(BusinessComponent, #getBinder().getBC()).getLookupData(fieldName!, selDr!)
        ids! = lookupAttributes!.getFieldsHavingAttributeValue("EDITABLE", "2")
        REM         ids! = rs!.get(0).getFieldsHavingAttributeValue("EDITABLE", "2")
        if !ids!.isEmpty() then
            idNames! = ids!.getFieldNames()
        else
            idNames! = new BBjVector()
            idNames!.add(rs!.get(0).getColumnName(0))
        endif

        desc$ = "" 
        if rs!.getColumnIndex("DESC") >= 0 then
            desc$="DESC"
        else
            if rs!.getColumnIndex("desc") >= 0 then
                desc$="desc"
            endif
        endif

        vectorKeys! = new BBjVector()
        vectorValues! = new BBjVector()

        if #listButtonFirstRowEmpty! then
            vectorKeys!.add("")
            vectorValues!.add("")
        endif

        itResultSet! = rs!.iterator()
        while itResultSet!.hasNext()
            dr! = itResultSet!.next()
            idField! = new StringBuilder()
            itIDNames! = idNames!.iterator()
            while itIDNames!.hasNext()
                idName! = itIDNames!.next()
                idField!.append(dr!.getFieldAsString(idName!))

                if itIDNames!.hasNext() then
                    idField!.append($00$)
                endif
            wend

            idField! = idField!.toString()
            vectorKeys!.add(idField!)

            if desc$>"" then
                vectorValues!.add(dr!.getFieldAsString(desc$))
            else
                vectorValues!.add(idField! + ": no DESC")
            endif
        wend

        control!.setUserData(vectorKeys!)
        control!.insertItems(0, vectorValues!)
    methodend
    

    method protected void registerCallbacks(BBjControl c!)
        switch c!.getControlType()
REM don't use ON_EDIT_MODIFY as long as DWC reports ON_EDIT_MODIFY also on programmatic changes
            case BBjControl.INPUTE_TYPE
            case BBjControl.INPUTN_TYPE
            case BBjControl.INPUTD_TYPE
                c!.setCallback(BBjAPI.ON_EDIT_MODIFY,#this!,"onControlDirty")
                break
            case BBjControl.LISTBUTTON_TYPE
            case BBjControl.LISTEDIT_TYPE
                c!.setCallback(BBjAPI.ON_LIST_SELECT,#this!,"onControlDirty")
                break
            case BBjControl.CHECKBOX_TYPE
                c!.setCallback(BBjAPI.ON_CHECK_ON,#this!,"onControlDirty",err=*next)
                c!.setCallback(BBjAPI.ON_CHECK_OFF,#this!,"onControlDirty",err=*next)
                break
            case default
                c!.setCallback(BBjAPI.ON_GAINED_FOCUS,#this!,"onControlDirty",err=*next)
                break
        swend
    methodend

    method public void setBinder(BCBinder binder!)
        #super!.setBinder(binder!)
    methodend
    
    method public void onControlDirty(BBjEvent ev!)
        #getBinder().sendSignal(BCBinder.SIGNAL_DIRTY)
        BBjAPI().getBuiManager().setShowConfirmCloseDialog(1,err=*next)
    methodend

    method public void onCalendarButtonPush(BBjButtonPushEvent ev!)
        control! = ev!.getControl()
        inputD! = control!.getUserData()
        cast(BBjInputD, inputD!).calendar()
    methodend


    rem returns the bc-fieldname linked to the control or "" when unlinked
    method public String getFieldNameForControl(BBjControl control!)
        controlName! = control!.getName()

        if #getControlMap().containsKey(controlName!) then
            methodret cast(String, #getControlMap().get(controlName!))
        endif

        if #fieldList!.contains(controlName!) then
            methodret controlName!
        endif

        methodret ""
    methodend
    
    method public DataRow getFieldsForWrite()
        methodret #getFieldsForWrite(Boolean.FALSE)
    methodend
    
    rem /**
    rem  * returns the fields of the form with its values as a datarow, if the controlnames correlate to fields in the atributes record
    rem  */
    method protected DataRow getFieldsForWrite(Boolean includeReadOnly!)
        rem if not enabled: do not return any fields
        if !#cw!.isEnabled() then
            methodret new DataRow()
        endif

        sel! = #getBinder().getSelection()

        if (sel!.size() <> 1) then
            rec! = #getBinder().getAttributesRecord().clone()
            rec!.clear()
        else
            rs! = #getBinder().getRS()
            rowkey$ = sel!.get(0)
            rec! = rs!.get(rowkey$)
        endif

        dr! = new DataRow()
        controlMap! = #getControlMap()
        it! = controlMap!.values().iterator()
        rem add all control values where control name = field name in attributes record and editable = 1 or 2
        attributes! = #getBinder().getAttributesRecord()
        while it!.hasNext()
            field$ = it!.next()
            if !attributes!.contains(field$) then continue
            editable! = "0"
            editable! = attributes!.getFieldAttribute(field$, "EDITABLE",err=*next)

            if !includeReadOnly! and !editable!.equals("1") and !editable!.equals("2") then
                continue;rem only editable fields for to be added
            endif

            control! = #getControlFromControlList(controlMap!.inverse().get(field$))
            value! = #getValueFromControl(control!)
            dr!.setFieldValue(field$, attributes!.getFieldType(field$), value!)
        wend

        fieldNames! = rec!.getFieldNames()
        writeDR! = new DataRow()
        for i = 0 to fieldNames!.size()-1
            fieldName! = fieldNames!.get(i)
            if !attributes!.contains(fieldName!) then continue
            editable! = "0"
            editable! = attributes!.getFieldAttribute(fieldName!, "EDITABLE",err=*next)

            if !includeReadOnly! and !editable!.equals("1") and !editable!.equals("2") then
                continue
            endif

            if dr!.contains(fieldName!)then
                if editable!.equals("2") then
                    writeDR!.setFieldValue(fieldName!, dr!.getFieldAsString(fieldName!))
                endif

                if !rec!.getFieldAsString(fieldName!).equals(dr!.getFieldAsString(fieldName!)) then
                    writeDR!.setFieldValue(fieldName!, dr!.getFieldAsString(fieldName!))
                endif
            endif
        next i

        methodret writeDR!
    methodend

    method protected Object getValueFromControl(BBjControl control!)
        controlType = control!.getControlType()
        switch controlType
            case BBjControl.INPUTE_TYPE
                rem userdata is used for quicksearch
                userData! = control!.getUserData()

                if userData! <> null() then
                    methodret userData!
                else
                    methodret control!.getText()
                endif

                break
            case BBjControl.LISTBUTTON_TYPE
                listEdit! = cast(BBjListButton, control!)
                selIndex = listEdit!.getSelectedIndex()

                if selIndex < 0 then
                    methodret ""
                endif

                if listEdit!.getUserData() = null() then
                    methodret listEdit!.getItemAt(selIndex)
                endif

                vectorKeys! = listEdit!.getUserData()
                methodret vectorKeys!.get(selIndex)
                break
            case BBjControl.LISTBOX_TYPE
                
                listEdit! = cast(BBjListBox, control!)
                if listEdit!.getMultipleSelection() then
                    selIndices! = listEdit!.getSelectedIndices()
                    if selIndices!.size() = 0 then
                        methodret ""
                    endif

                    if listEdit!.getUserData() = null() then
                        x$=""
                        it! = selIndices!.iterator()
                        while it!.hasNext()
                            if x$>"" then
                                x$=x$+$0a$
                            fi
                            x$=x$+listEdit!.getItemAt(it!.next())
                        wend    
                        methodret x$ 
                    endif
                    
                    vectorKeys! = listEdit!.getUserData()

                        x$=""
                        it! = selIndices!.iterator()
                        while it!.hasNext()
                            if x$>"" then
                                x$=x$+$0a$
                            fi
                            x$=x$+vectorKeys!.get(it!.next())
                        wend    
                    methodret x$ 

                    
                else
                    selIndex = listEdit!.getSelectedIndex()
    
                    if selIndex < 0 then
                        methodret ""
                    endif
    
                    if listEdit!.getUserData() = null() then
                        methodret listEdit!.getItemAt(selIndex)
                    endif
    
                    vectorKeys! = listEdit!.getUserData()
                    methodret vectorKeys!.get(selIndex)
                endif
                break
                
            case BBjControl.CHECKBOX_TYPE
                selected! = cast(BBjCheckBox, control!).isSelected()

                if selected! then
                    methodret Boolean.TRUE
                else
                    methodret Boolean.FALSE
                endif

                break
            case BBjControl.INPUTD_TYPE
                value! = cast(BBjInputD, control!).getValue()
                methodret value!
                break
            case default
                methodret control!.getText()
                break
        swend
    methodend

    method protected void toggleIDFieldEnabled(Boolean enabled!)
        idControls! = #getIDControls()
        it! = idControls!.iterator()
        while it!.hasNext()
            idControl! = it!.next()
            idControl!.setEditable(enabled!)
        wend
    methodend

    method protected BBjVector getIDControls()
        if #idControls! <> null() then
            methodret #idControls!
        endif

        if #controlList! = null() then
            methodret new BBjVector()
        endif

        attrRecord! = #getBinder().getBC().getAttributesRecord()
        ids! = attrRecord!.getFieldsHavingAttributeValue("EDITABLE", "2")

        if ids!.isEmpty() then
            methodret new BBjVector()
        endif

        idNames! = ids!.getFieldNames()
        it! = #controlList!.iterator()
        idControls! = new BBjVector()
        while it!.hasNext()
            control! = it!.next()
            fieldName! = #getFieldNameForControl(control!)

            if idNames!.contains(fieldName!) then
                idControls!.add(control!)
            endif
        wend

        #idControls! = cast(BBjVector, idControls!)
        methodret idControls!
    methodend

    method protected void focusFirstIDField()
        idControls! = #getIDControls()

        if idControls!.size() < 1 then
            methodret
        endif

        firstID! = idControls!.get(0)

        if firstID!.isEnabled() then
            firstID!.focus()
        endif
    methodend

    method public void onSignal(int signal!, Object payload!)
        binder! = #getBinder()
        switch signal!
            case binder!.SIGNAL_BLANK
            case binder!.SIGNAL_NEW
                #clearForm()
                #toggleIDFieldEnabled(Boolean.TRUE)
                #focusFirstIDField()
                break
            case binder!.SIGNAL_TERMINATE
                break
            case default
                break
        swend
    methodend
    rem methods from IPersistentState
    rem /**
    rem  * this method will be called to apply the state given by the widget
    rem  * @param state! state string with the state which was stored by the widget
    rem  */
    method public void applyState(String state!)
        #clearForm()

        if state!.trim().equals("") then
            methodret
        endif

        dr! = DataRow.fromJson(state!)
        fieldNames! = dr!.getFieldNames()
        it! = fieldNames!.iterator()
        while it!.hasNext()
            field! = cast(String, it!.next())
            control! = #getControlFromControlList(field!)

            if control! = null() then
                continue
            endif

            #fillControl(control!, dr!, field!)
        wend
    methodend
    rem /**
    rem  * this method will provide the widget with the current state of the component.
    rem  * the widget will store this data for later retrieval
    rem  */
    method public String retrieveState()
        methodret #getFieldsForWrite().toJson(0)
    methodend
    rem /**
    rem  * the widget will call this method to register itself for statechanges of the component
    rem  * the method should set a callback which should call the method 'methodName' on 'callable!' whenever the state changed
    rem  * Event should be BBjCustomEvent.
    rem  */
    method public void setStateChangeCallback(String methodName!, CustomObject callable!)
    methodend

    method public DataRow getFieldsForFieldSelection()
        dr! = new DataRow()

        if #controlMap! <> null() then
            it! = #controlMap!.values().iterator()
            while it!.hasNext()
                field$ = it!.next()
                dr!.setFieldValue(field$, "")
            wend
        endif

        methodret dr!
    methodend

classend