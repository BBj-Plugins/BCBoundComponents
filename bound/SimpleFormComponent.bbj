use ::BusinessUIComponents/AbstractBCBoundWidget.bbj::AbstractBCBoundWidget
use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget
use ::BusinessUIComponents/configurations/IPropertiesManager.bbj::IPropertiesManager
use ::BusinessUIComponents/configurations/PropertiesManager.bbj::PropertiesManager
use com.basiscomponents.bc.BCBound
use com.basiscomponents.bc.BCBinder

use com.basiscomponents.db.ResultSet
use com.basiscomponents.db.DataRow
use java.util.HashMap

rem /**
rem  * A sample BBj Widget Implementation
rem  */
class public SimpleFormComponent extends AbstractBCBoundWidget

    field private BBjWindow cw!
    field private BBjVector fieldList!
    field private BBjVector controlList!
    field private BBjVector calendarButtons! = new BBjVector()

    rem --------------------- constructors -------------------------------------
    
    rem /**
    rem  * disabled default constructor
    rem  */
    method private SimpleFormComponent()
    methodend

    rem /**
    rem  * The constructor that creates the widget on wnd!
    rem * @param BBjWindow wnd!: parent window
    rem * @param BBjInt id: the control ID
    rem * @param BBjInt x: x-location
    rem * @param BBjInt y: y-location
    rem * @param BBjInt w: width
    rem * @param BBjInt h: height
    rem */
    method public SimpleFormComponent(BBjWindow wnd!, BBjInt id!, BBjInt x!, BBjInt y!, BBjInt w!, BBjInt h!)
        #super!.create(wnd!,id!,x!,y!,w!,h!)
    methodend
    

    method public void setForm(BBjString res_name$, BBjNumber id)
        res = BBjAPI().getSysGui().resOpen(res_name$)
        #cw! = #getCanvas().createChildWindow(res, id, 100, 0, 0)
        
    methodend

    rem ---------------------- methods from BBjWidget -------------------------------- 

    rem /**
    rem  * @Override
    rem  * This method is called whenever the widget needs to be rendered
    rem  * @param Boolean f_init!: if TRUE the control is rendered for the first time so this method has to perform initial rendering
    rem  */
    method public void redraw(Boolean f_init!)
        if (f_init!) then
        FI
        if (#cw! <> null()) then 
            #cw!.setSize(#getWidth(),#getHeight())
        fi
        #updateProperties()
    methodend
    
    rem /**
    rem  * updating properties from properties manager
    rem  */
    method protected void updateProperties()
        #super!.updateProperties()
        it! = #calendarButtons!.iterator()
        while it!.hasNext()
            calendarButton! = it!.next()
            cast(BBjButton, calendarButton!).setImageFile(#getUIPropertiesManager().getProperty("SIMPLE_FORM_BTN_CALENDAR"))
        wend
    methodend

    method private void clearForm()
        if (#fieldList! = null()) then #buildFieldList()
        
        it! = #fieldList!.iterator()
        while it!.hasNext()
            n$=it!.next()
            #getControlFromControlList(n$).setText("")
        wend
        #cw!.setEnabled(1)
    methodend

    method private void updateScreen()
        if (#cw!= null()) then methodret
        
        if (#fieldList! = null()) then #buildFieldList()
        
        sel! = #getBinder().getSelection()
        
        if (sel!.size() <> 1) then
            #clearForm()
            methodret
        fi
        rs! = #getBinder().getRS()
        rowkey$ = sel!.get(0)
        rec! = rs!.get(rowkey$)
        it! = #fieldList!.iterator()
        while it!.hasNext()
            n$=it!.next()
            if rec!.contains(n$) then
                #getControlFromControlList(n$).setText(rec!.getFieldAsString(n$))
            else
                #getControlFromControlList(n$).setText("")
            endif
        wend
        #cw!.setEnabled(1)
    methodend
    
    method public void onSetData()
        #updateScreen()
    methodend

    method public void onSetSelection()
        #updateScreen()
    methodend
    
    method private BBjVector getAllControlsRecursive(BBjVector controls!, BBjWindow window!)
        currentControls! = window!.getAllControls()
        it! = currentControls!.iterator()
        while it!.hasNext()
            control! = it!.next()
            type = control!.getControlType()
            if type = BBjControl.CHILD_TYPE then
                controls! = #getAllControlsRecursive(controls!,cast(BBjChildWindow, control!))
            else
                controls!.add(control!)
            endif
        wend
        methodret controls!
    methodend
    
    method private BBjControl getControlFromControlList(String controlName!)
        it! = #controlList!.iterator()
        while it!.hasNext()
            control! = it!.next()
            name! = control!.getName()
            if name!.equals(controlName!) then
                methodret control!
            endif
        wend
        methodret null()
    methodend

    method private void buildFieldList()
        attributes! = #getBinder().getAttributesRecord()
        l! = attributes!.getFieldNames()
        
        #controlList! = #getAllControlsRecursive(new BBjVector(), #cw!)
        formfields! = #controlList!
        fieldList! = new BBjVector()
        
        it! = formfields!.iterator()
        
        while it!.hasNext()
            c! = it!.next() 
            n$=c!.getName()
            if l!.contains(n$) then
                fieldList!.addItem(n$)
                
                #registerCallbacks(c!)
                precision! = attributes!.getFieldPrecision(n$)
                #formatField(c!)
            fi
        wend
        #updateProperties()
        #fieldList! = CAST(BBjVector,fieldList!)
    methodend
    
    rem /**
    rem  * formats a control by parsing the attributes record and appliying those attributes.
    rem  */
    method private void formatField(BBjControl c!)
        attributes! = #getBinder().getAttributesRecord()
        fieldAttributes! = attributes!.getFieldAttributes(c!.getName())
REM             ? fieldAttributes!
REM             escape
        
        precision! = attributes!.getFieldPrecision(c!.getName())
        switch c!.getControlType()
        
            case BBjControl.INPUTE_TYPE
REM                 cast(BBjInputE, c!).setLength(precision!)
                break
                
            case BBjControl.INPUTN_CONTROL
                if fieldAttributes!.containsKey("MASK") then
                    mask! = fieldAttributes!.get("MASK")
                    cast(BBjInputN, c!).setMask(mask!)
                else
                    scale = 0
                    if fieldAttributes!.containsKey("Scale") then
                        scale = num(fieldAttributes!.get("Scale"))
                    endif
                    beforeComma = num(precision!) - scale
                    oldMask! = cast(BBjInputN, c!).getMask()
                    rem if old mask of the control had a specific number of digits after dot defined, then use this instead
                    if oldMask!.contains(cast(BBjInputN, c!).getDotCharacter()) then
                        oldScale = oldMask!.substring(oldMask!.indexOf(cast(BBjInputN, c!).getDotCharacter())).length() - 1
                        if oldScale < scale then scale = oldScale
                    endif
                    if scale > 0 then
                        mask! = fill(beforeComma - 1,"#") + "0" + cast(BBjInputN, c!).getDotCharacter() + fill(scale, "#")
                    else
                        mask! = fill(beforeComma,"#")
                    endif
                    rem add '-' to mask if negatable
                    if fieldAttributes!.containsKey("Signed") then
                        signed! = fieldAttributes!.get("Signed")
                        if signed!.equals("1") then
                            mask! = "-" + mask!
                        endif
                    endif
                    cast(BBjInputN, c!).setMask(mask!)
                endif
                break
                
            case BBjControl.INPUTD_CONTROL
                if fieldAttributes!.containsKey("MASK") then
                    mask! = fieldAttributes!.get("MASK")
                else
                    mask! = "%Yd-%Mz-%Dz"
                endif
                cast(BBjInputD, c!).setMask(mask!)
                #addCalendarButton(cast(BBjInputD, c!))
                break
            
            case default
                break
        swend
    methodend
    
    method private void addCalendarButton(BBjInputD control!)
        calendarButton! = #getCanvas().addButton(#getCanvas().getAvailableControlID(), control!.getX() + control!.getWidth() - control!.getHeight() + 1, control!.getY() + 1, control!.getHeight() - 2, control!.getHeight() - 2, "")
        #calendarButtons!.add(calendarButton!)
REM         calendarButton!.setImageFile("BusinessUIComponents/icon/ic_insert_invitation_black_24dp.png")
        calendarButton!.setImageSize(control!.getHeight() - 6,control!.getHeight() - 6)
        calendarButton!.setUserData(control!)
        calendarButton!.setCallback(BBjAPI.ON_BUTTON_PUSH,#this!,"onCalendarButtonPush") 
    methodend
    
    method private void registerCallbacks(BBjControl c!)
        switch c!.getControlType()
            case BBjControl.INPUTE_TYPE
            case BBjControl.INPUTN_TYPE
            case BBjControl.INPUTD_TYPE
                c!.setCallback(BBjAPI.ON_EDIT_MODIFY,#this!,"onControlEditModify") 
                break
            case default
                c!.setCallback(BBjAPI.ON_GAINED_FOCUS,#this!,"onControlGainedFocus",err=*next) 
                break
        swend
    methodend
    
    method public void setBinder(BCBinder binder!)
        #super!.setBinder(binder!)
    methodend
    
    method public void onControlGainedFocus(BBjGainedFocusEvent ev!)
        #getBinder().sendSignal(BCBinder.SIGNAL_DIRTY)
    methodend
    
    method public void onCalendarButtonPush(BBjButtonPushEvent ev!)
        control! = ev!.getControl()
        inputD! = control!.getUserData()
        cast(BBjInputD, inputD!).calendar()
    methodend
    
    method public void onControlEditModify(BBjEditModifyEvent ev!)
        #getBinder().sendSignal(BCBinder.SIGNAL_DIRTY)
    methodend
    
    rem /**
    rem  * returns the fields of the form with its values as a datarow, if the controlnames correlate to fields in the atributes record
    rem  */
    method public DataRow getFieldsForWrite()
    rem if not enabled: do not return any fields
        if !#cw!.isEnabled() then methodret new DataRow()
        dr! = new DataRow()
        it! = #fieldList!.iterator()
        rem add all control values where control name = field name in attributes record and editable = 1 or 2
        attributes! = #getBinder().getAttributesRecord()
        while it!.hasNext()
            field$ = it!.next() 
            editable! = "0"; editable! = attributes!.getFieldAttribute(field$, "EDITABLE",err=*next)
            if !editable!.equals("1") and !editable!.equals("2") then continue;rem only editable fields for to be added
            control! = #getControlFromControlList(field$)
            value! = control!.getText()
            dr!.setFieldValue(field$, value!)
        wend
REM         escape
        methodret dr!
    methodend
    
    
    method public void onSignal(int signal!, Object payload!)
        binder! = #getBinder()
        switch signal!
            case binder!.SIGNAL_NEW
                #clearForm()
                break
            case default
                break
        swend
    methodend

classend