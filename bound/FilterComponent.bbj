use ::BusinessUIComponents/AbstractBCBoundWidget.bbj::AbstractBCBoundWidget
use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget
use ::BusinessUIComponents/configurations/IPropertiesManager.bbj::IPropertiesManager
use ::BusinessUIComponents/configurations/PropertiesManager.bbj::PropertiesManager
use ::BusinessUIComponents/configurations/SelectionBC.bbj::SelectionBC
use ::BusinessUIComponents/utils/QuickSearchField.bbj::QuickSearchField
use ::BusinessUIComponents/bound/SimpleFormComponent.bbj::SimpleFormComponent

use com.basiscomponents.bc.BCBound
use com.basiscomponents.bc.BCBinder
use com.basiscomponents.bc.BusinessComponent
use com.basiscomponents.db.ResultSet
use com.basiscomponents.db.DataRow

use com.google.common.collect.BiMap
use com.google.common.collect.HashBiMap
use java.util.HashMap
use java.util.ArrayList
use java.time.LocalDateTime
use java.time.format.DateTimeFormatter

rem /**
rem  * A sample BBj Widget Implementation
rem  */
class public FilterComponent extends SimpleFormComponent

    field protected BCBinder mainBinder!
    field protected SelectionBC selectionBC!
    field protected BBjButton fetchButton!
    rem --------------------- constructors -------------------------------------
    
    rem /**
    rem  * disabled default constructor
    rem  */
    method private FilterComponent()
    methodend

    rem /**
    rem  * The constructor that creates the widget on wnd!
    rem * @param BBjWindow wnd!: parent window
    rem * @param BBjInt id: the control ID
    rem * @param BBjInt x: x-location
    rem * @param BBjInt y: y-location
    rem * @param BBjInt w: width
    rem * @param BBjInt h: height
    rem */
    method public FilterComponent(BCBinder mainBinder!, BBjWindow wnd!, BBjInt id!, BBjInt x!, BBjInt y!, BBjInt w!, BBjInt h!)
        #super!(wnd!,id!,x!,y!,w!,h!)
        #mainBinder! = mainBinder!
        #selectionBC! = new SelectionBC(#mainBinder!.getBC())
        selectionBinder! = new BCBinder(#selectionBC!)
        #setBinder(selectionBinder!)
        selectionBinder!.register(#this!)
    methodend
    
    method public void setKey(String key!)
        #selectionBC!.setKey(key!)
    methodend
    
    method public void setForm(BBjString res_name$, BBjNumber id)
        res = BBjAPI().getSysGui().resOpen(res_name$)
        #setcw(#getCanvas().createChildWindow(res, id, 100, 0, 20))
        #getCanvas().setSize(#getcw().getWidth(), #getcw().getHeight() + 20)
        #getcw().setVisible(Boolean.TRUE)
        #addButtons()
    methodend
    
    method public BBjNumber getHeight()
        methodret #getCanvas().getHeight()
    methodend
    
    method protected void addButtons()
        #fetchButton! = #getCanvas().addButton(#getCanvas().getAvailableControlID(),5,5,20,20,"")
        #fetchButton!.setCallback(#fetchButton!.ON_BUTTON_PUSH,#this!,"buttonPushFetch")
        #updateProperties()
    methodend
    
    method public void buttonPushFetch(BBjEvent ev!)
        #fetch()
    methodend
    
    method protected void fetch()
        #getBinder().getSelection().clear();rem clear to only have the write dr in the result set
        #getBinder().getRS().clear();rem clear to only have the write dr in the result set
REM         #getBinder().setDebugLevel(1)
REM         ?#getBinder().getDataRowForWrite()
REM         escape
        #getBinder().sendSignal(BCBinder.SIGNAL_SAVE)
        filter! = #getBinder().getRS().get(0)
        #mainBinder!.getBC().setFilter(filter!)
        #mainBinder!.retrieve()
    methodend
    
    
    
    method public void onSetData()
    methodend

    method public void onSetSelection()
    methodend
    
    
    method public DataRow getFieldsForWrite()
        fields! = #super!.getFieldsForWrite()
        fields!.setFieldValue(SelectionBC.FIELDNAME_SELECTION_DESC(), "test")
        methodret fields!
    methodend
    
    method public void setUIPropertiesManager(IPropertiesManager uiPropertiesManager!)
        #super!.setUIPropertiesManager(uiPropertiesManager!)
        #updateProperties()
    methodend
    
    method protected void updateProperties()
        #super!.updateProperties()
        if #fetchButton! <> null() then 
            #fetchButton!.setImageFile(#getUIPropertiesManager().getProperty("FILTER_BTN_FETCH"))
            #fetchButton!.setImageSize(16, 16)
        endif
    methodend
REM     
REM     method public void buildControlMap()
REM         #super!.buildControlMap()
REM         #removeCallbacks()
REM     methodend
REM     
REM     method protected void removeCallbacks()
REM         it! = #getcontrolList().iterator()
REM         while it!.hasNext()
REM             c! = cast(BBjControl, it!.next())
REM             switch c!.getControlType()
REM                 case BBjControl.INPUTE_TYPE
REM                 case BBjControl.INPUTN_TYPE
REM                 case BBjControl.INPUTD_TYPE
REM                     c!.clearCallback(BBjAPI.ON_EDIT_MODIFY, err=*next) 
REM                     break
REM                 case BBjControl.LISTBUTTON_TYPE
REM                 case BBjControl.LISTEDIT_TYPE
REM                     c!.clearCallback(BBjAPI.ON_LIST_SELECT, err=*next) 
REM                     break
REM                 case default
REM                     c!.clearCallback(BBjAPI.ON_GAINED_FOCUS, err=*next) 
REM                     break
REM             swend
REM         wend
REM     methodend
REM 
REM     rem ---------------------- methods from BBjWidget -------------------------------- 
REM 
REM     
REM     method public void onSignal(int signal!, Object payload!)
REM         binder! = #getBinder()
REM         switch signal!
REM             case binder!.SIGNAL_BLANK
REM                 #clearForm()
REM                 break
REM             case binder!.SIGNAL_TERMINATE
REM                 it! = #getquickSearchElements().iterator()
REM                 while it!.hasNext()
REM                     qs! = cast(QuickSearchField, it!.next())
REM                     qs!.terminateSearchUI()
REM                 wend
REM                 break
REM             case default
REM                 break
REM         swend
REM     methodend
    

classend