use ::BusinessUIComponents/AbstractBCBoundWidget.bbj::AbstractBCBoundWidget
use ::BusinessUIComponents/configurations/IPropertiesManager.bbj::IPropertiesManager
use ::BusinessUIComponents/configurations/PropertiesManager.bbj::PropertiesManager
use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget
use com.basiscomponents.bc.BCBound
use com.basiscomponents.bc.BCBinder

use com.basiscomponents.db.ResultSet
use com.basiscomponents.db.DataRow

rem /**
rem  * A sample BBj Widget Implementation
rem  */
class public EditToolbarComponent extends AbstractBCBoundWidget

    field private BBjToolButton btn_new!
    field private BBjToolButton btn_save!
    field private BBjToolButton btn_delete!
    
    field private Boolean dirty! = BBjAPI.FALSE
        
    rem --------------------- constructors -------------------------------------
    
    rem /**
    rem  * disabled default constructor
    rem  */
    method private EditToolbarComponent()
    methodend

    rem /**
    rem  * The constructor that creates the widget on wnd!
    rem * @param BBjWindow wnd!: parent window
    rem * @param BBjInt id: the control ID
    rem * @param BBjInt x: x-location
    rem * @param BBjInt y: y-location
    rem * @param BBjInt w: width
    rem * @param BBjInt h: height
    rem */
    method public EditToolbarComponent(BBjWindow wnd!, BBjInt id!, BBjInt x!, BBjInt y!, BBjInt w!, BBjInt h!)
        #super!.create(wnd!,id!,x!,y!,w!,h!)
    methodend
    

    rem ---------------------- methods from BBjWidget -------------------------------- 

    rem /**
    rem  * @Override
    rem  * This method is called whenever the widget needs to be rendered
    rem  * @param Boolean f_init!: if TRUE the control is rendered for the first time so this method has to perform initial rendering
    rem  */
    method public void redraw(Boolean f_init!)
        if (f_init!) then
            #getCanvas().setOpaque(0)
            
            #btn_new! = #getCanvas().addToolButton(100,0,0,20,20,"NEW")
            #btn_new!.setCallback(BBjAPI.ON_TOOL_BUTTON_PUSH,#this!,"onBtnNew")
            
            #btn_save! = #getCanvas().addToolButton(101,20,0,20,20,"SAVE")
            #btn_save!.setCallback(BBjAPI.ON_TOOL_BUTTON_PUSH,#this!,"onBtnSave")
            
            #btn_delete! = #getCanvas().addToolButton(102,40,0,20,20,"DELETE")
            #btn_delete!.setCallback(BBjAPI.ON_TOOL_BUTTON_PUSH,#this!,"onBtnDelete")
            
            #enableControls()
            #updateProperties()
        FI
        
    methodend
    
    rem /**
    rem  * updating properties from properties manager
    rem  */
    method protected void updateProperties()
            #super!.updateProperties()
            uiProperties! = #getUIPropertiesManager()
            #btn_new!.setImageFile(uiProperties!.getProperty("EDIT_TOOLBAR_BTN_NEW_IMAGE"))
            #btn_save!.setImageFile(uiProperties!.getProperty("EDIT_TOOLBAR_BTN_SAVE_IMAGE"))
            #btn_delete!.setImageFile(uiProperties!.getProperty("EDIT_TOOLBAR_BTN_DELETE_IMAGE"))
            
            height = uiProperties!.getPropertyAsNumber("EDIT_TOOLBAR_HEIGHT")
            imageSize = height - 4
            if height > 0 then 
                #btn_new!.setImageSize(imageSize, imageSize)
                #btn_new!.setSize(height, height)
                #btn_save!.setImageSize(imageSize, imageSize)
                #btn_save!.setSize(height, height)
                #btn_save!.setLocation(height, 0)
                #btn_delete!.setImageSize(imageSize, imageSize)
                #btn_delete!.setSize(height, height)
                #btn_delete!.setLocation(height * 2, 0)
            endif
    
    methodend


    method private void enableControls()
        if #getBinder() <> null() then
            #btn_new!.setEnabled(#dirty! = BBjAPI.FALSE)
            #btn_save!.setEnabled(#dirty!)
            #btn_delete!.setEnabled(#getBinder().getSelection().size()>0)
        fi
    methodend
    
    method public void onBtnNew( BBjToolButtonPushEvent ev! )
        #getBinder().sendSignal(BCBinder.SIGNAL_NEW)
    methodend

    method public void onBtnSave( BBjToolButtonPushEvent ev! )
        #dirty! = BBjAPI.FALSE
        #getBinder().sendSignal(BCBinder.SIGNAL_SAVE, err=*next)
        #enableControls()
        binder! = #getBinder()
        bc! = binder!.getBC()
        filter! = bc!.getFilter(err=*next)
        rem if a filter is set, retrieve again, because the newly written record might be filtered out
        if filter! <> null() and !filter!.isEmpty() then binder!.retrieve()
    methodend
    
    
    method public void onBtnDelete( BBjToolButtonPushEvent ev! )
        text! = #getTextPropertiesManager().getProperty("EDIT_TOOLBAR_DIALOG_DELETE_DATA")
        action = msgbox(text!, 1, text!)
        switch action
            case 1
                #getBinder().sendSignal(BCBinder.SIGNAL_DELETE)
                break
            case 2
                break
            case default
                break
         swend
    methodend
    
    method public void onSignal(int signal!, Object payload!)
        if signal! = BCBinder.SIGNAL_DIRTY then
            #dirty! = BBjAPI.TRUE
        fi
        #enableControls()
    methodend
    
    method public void onSetSelection()
        #enableControls()
    methodend

    method public void onSetData()
        #enableControls()
    methodend
    
    method public Boolean canTerminate()
        methodret #canSetSelection()
    methodend
    
    method public Boolean canSetSelection()
        if #dirty! then
            text! = #getTextPropertiesManager().getProperty("EDIT_TOOLBAR_DIALOG_SAVE_DATA")
            action = msgbox(text!, 3, text!)
            switch action
                case 6
                    rem action = YES
                    #onBtnSave(null())
                    methodret Boolean.TRUE
                case 7
                    rem action = NO
                    #dirty! = BBjAPI.FALSE
                    #enableControls()
                    methodret Boolean.TRUE
                case 2
                    rem action = CANCEL
                    methodret BBjAPI.FALSE
                case default
                    methodret BBjAPI.FALSE
             swend
        fi
        methodret BBjAPI.TRUE
    methodend
    

classend