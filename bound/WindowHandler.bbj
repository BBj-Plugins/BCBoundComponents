REM /**
REM  * BCErrorHandler.bbj
REM  * @author jcorea
REM  *
REM  * an error handler that reacts to the error signal from BCBinder
REM  */

use ::BusinessUIComponents/AbstractBCBoundWidget.bbj::AbstractBCBoundWidget
use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget
use ::BusinessUIComponents/configurations/PropertiesManager.bbj::PropertiesManager
use ::BusinessUIComponents/configurations/CustomConfigurationsBC.bbj::CustomConfigurationsBC
use ::BusinessUIComponents/configurations/IPersistentState.bbj::IPersistentState
use com.basiscomponents.bc.IConfigurationsBC
use com.basiscomponents.bc.BCBound
use com.basiscomponents.bc.IBCBound
use com.basiscomponents.bc.BCBinder


use com.basiscomponents.db.ResultSet
use com.basiscomponents.db.DataRow

class public WindowHandler implements IBCBound, IPersistentState

    
    field protected BCBinder binder!
    field protected BBjWindow wnd!
    field protected IConfigurationsBC configBC!
    field protected String programName! = ""
    field protected BBjNumber closeMode
    
    field protected static BBjNumber CLOSE_MODE_DESTROY = 100
    field protected static BBjNumber CLOSE_MODE_RELEASE = 110
    field protected static BBjNumber CLOSE_MODE_OFF = 120

    method public WindowHandler(BBjWindow wnd!)
        #wnd! = wnd!
        wnd!.setCallback(BBjAPI.ON_CLOSE, #this!,"onClose")
        #configBC! = new CustomConfigurationsBC(info(3,2))
        #closeMode = #CLOSE_MODE_RELEASE
    methodend
    
    rem -----------------------Close mode----------------------------------------
    
    method public void setCloseMode(BBjNumber closeMode)
        #closeMode = closeMode
        if #closeMode = #CLOSE_MODE_OFF then
            #wnd!.clearCallback(BBjAPI().ON_CLOSE)
        endif
    methodend
    
    method public BBjNumber CLOSE_MODE_DESTROY()
        methodret #CLOSE_MODE_DESTROY
    methodend
    
    method public BBjNumber CLOSE_MODE_RELEASE()
        methodret #CLOSE_MODE_RELEASE
    methodend
    
    method public BBjNumber CLOSE_MODE_OFF()
        methodret #CLOSE_MODE_OFF
    methodend
    
    rem -------------------------BCBinder methods--------------------------------
    method public void setBinder(BCBinder binder!)
        #binder! = binder!
    methodend    
    
    method public BCBinder getBinder()
        methodret #binder!
    methodend    
    
    method public void onSetData()
    methodend
   
    method public void onSetSelection()
    methodend
    
    method public Boolean canSetSelection()
        methodret BBjAPI.TRUE
    methodend
    
    method public Boolean canTerminate()
        methodret BBjAPI.TRUE
    methodend
    
    method public void onSignal(int signal!, Object payload!)
        if signal!=BCBinder.SIGNAL_TERMINATE then
            PropertiesManager.getInstance().terminate()
            #saveWindowConfig()
        endif
        if signal!=BCBinder.SIGNAL_DESTROY then
            if #closeMode = #CLOSE_MODE_RELEASE then
                 release
             else
                #wnd!.destroy()
            endif
        endif
    methodend
    
    method public DataRow getFieldsForWrite()
        methodret new DataRow()
    methodend
    
    rem -------------------------custom methods--------------------------------
    
    method public void onClose(BBjCloseEvent ev!)
        if #binder! = null() then methodret
        if #closeMode = #CLOSE_MODE_OFF then
            wnd!.setVisible(0)
        else
            #binder!.sendSignal(BCBinder.SIGNAL_INITIATE_TERMINATE)
        endif
    methodend
    
    rem IPersistentState for configuration BC to save window position and size
    
    
    
    method public void setProgramName(String programName!)
        #programName! = programName!
    methodend
    
    
    method public void setConfigUser(String user!)
        #configBC!.setUserName(user!)
    methodend
    
    method public void applyWindowConfig()
        windowFilter! = #configBC!.getFilter().clone()
        windowFilter!.setFieldValue(#configBC!.getFieldNameKeyx(), #programName!)
        windowFilter!.setFieldValue(#configBC!.getFieldNameRealm(), "WND")
        windowFilter!.setFieldValue(#configBC!.getFieldNameSetting(), "")
REM         windowFilter!.setFieldValue(#configBC!.getFieldNameUserid(), #configBC!.getUserName())
        #configBC!.setFilter(windowFilter!)
        rs! = #configBC!.retrieve()
        if !rs!.size() then methodret
        autoConfig! = rs!.get(0)
        if autoConfig! <> null() then
            config! = autoConfig!.getFieldAsString(#configBC!.getFieldNameConfig())
            #applyState(config!)
        endif
    methodend
    
    method public void saveWindowConfig()
        config! = #getConfigFilter()
        config!.setFieldValue(#configBC!.getFieldNameConfig(), #retrieveState())
        #configBC!.write(config!)
    methodend
    
    method public DataRow getConfigFilter()
        windowFilter! = new DataRow()
        windowFilter!.setFieldValue(#configBC!.getFieldNameKeyx(), #programName!)
        windowFilter!.setFieldValue(#configBC!.getFieldNameRealm(), "WND")
        windowFilter!.setFieldValue(#configBC!.getFieldNameSetting(), "")
        windowFilter!.setFieldValue(#configBC!.getFieldNameUserid(), #configBC!.getUserName())
        methodret windowFilter!
    methodend
    
    rem /**
    rem  * this method will be called to apply the state given by the widget
    rem  * @param state! state string with the state which was stored by the widget
    rem  */
    method public void applyState(String state!)
        if state! = null() or state!.trim().equals("") then methodret
        elements! = state!.split($00$)
        if elements!.length <> 4 then methodret
        x = num(elements![0])
        y = num(elements![1])
        w = num(elements![2])
        h = num(elements![3])
        #wnd!.setLocation(x,y)
        #wnd!.setSize(w,h)
    methodend
    
    rem /**
    rem  * this method will provide the widget with the current state of the component.
    rem  * the widget will store this data for later retrieval
    rem  */
    method public String retrieveState()
        x = #wnd!.getX()
        y = #wnd!.getY()
        w = #wnd!.getWidth()
        h = #wnd!.getHeight()
        sb! = new StringBuilder()
        sb!.append(str(x)).append($00$)
        sb!.append(str(y)).append($00$)
        sb!.append(str(w)).append($00$)
        sb!.append(str(h))
        methodret sb!.toString()
    methodend
    
    rem /**
    rem  * the widget will call this method to register itself for statechanges of the component
    rem  * the method should set a callback which should call the method 'methodName' on 'callable!' whenever the state changed
    rem  * Event should be BBjCustomEvent. 
    rem  */
    method public void setStateChangeCallback(String methodName!, CustomObject callable!)
        #wnd!.setCallback(#wnd!.ON_RESIZE, callable!, methodName!)
        #wnd!.setCallback(#wnd!.ON_WINDOW_MOVE, callable!, methodName!)
    methodend
    

classend