REM /**
REM  * ExportMenuButton.bbj
REM  * @author mneu
REM  *
REM  */

use ::BusinessUIComponents/optionsDialogs/ExportHtmlDialog.bbj::ExportHtmlDialog
use ::BusinessUIComponents/optionsDialogs/ExportPdfDialog.bbj::ExportPdfDialog
use ::BusinessUIComponents/optionsDialogs/ExportTxtDialog.bbj::ExportTxtDialog
use ::BusinessUIComponents/optionsDialogs/ExportCsvDialog.bbj::ExportCsvDialog
use ::BusinessUIComponents/optionsDialogs/ExportXlsxDialog.bbj::ExportXlsxDialog
use ::BusinessUIComponents/optionsDialogs/ExportXmlDialog.bbj::ExportXmlDialog
use ::BusinessUIComponents/optionsDialogs/ExportCustomReportDialog.bbj::ExportCustomReportDialog
use ::BusinessUIComponents/optionsDialogs/OptionsDialog.bbj::OptionsDialog
use ::BusinessUIComponents/BusinessGrid.bbj::BusinessGrid

use ::FileChooser/FileChooser.bbj::FileChooser

use java.io.File
use java.nio.file.Paths
use java.nio.file.Path

use ::BusinessUIComponents/configurations/CustomConfigurationsBC.bbj::CustomConfigurationsBC

use com.basiscomponents.db.ResultSetExporter
use com.basiscomponents.db.DataRow
use com.basiscomponents.db.ResultSet
use com.basiscomponents.db.util.DataRowJsonMapper
use com.basiscomponents.db.export.SheetConfiguration
use com.basiscomponents.db.export.ReportDetails
use com.basiscomponents.db.export.ColumnWidthCalculator
use com.basiscomponents.db.BBArrayList

class public ExportMenuButton

    field private BBjMenuButton menuButton!
    field private BusinessGrid grid!
    field private CustomConfigurationsBC cfgBC!
    field private BBjString pgmName$

    field private ExportHtmlDialog exportHtmlDialog!
    field private ExportPdfDialog exportPdfDialog!
    field private ExportTxtDialog exportTxtDialog!
    field private ExportCsvDialog exportCsvDialog!
    field private ExportXlsxDialog exportXlsxDialog!
    field private ExportXmlDialog exportXmlDialog!
    field private ExportCustomReportDialog exportCustomReportDialog!
    field private OptionsDialog optionsDialog!
    field private FileChooser fileChooser!
    
    field private BBjWindow mainWindow!
    
    field private Boolean baristaHeaderVisible! = Boolean.FALSE

    method public ExportMenuButton(BBjWindow wnd!, BBjNumber id, BBjNumber x, BBjNumber y, BBjNumber width, BBjNumber height)
        #menuButton! = wnd!.addMenuButton(id, x, y, width, height, "")
        #menuButton!.setImageFile("BusinessUIComponents/icon/print.png")
        #menuButton!.setImageSize(23, 23)
        
        #menuButton!.setCallback(BBjMenuButton.ON_BUTTON_PUSH, #this!, "onMenuButtonPush")
        
        popupMenu! = #menuButton!.addDropdownMenu()
        popupMenu!.insertMenuItem(0, 1000, "Export XLSX").setCallback(BBjPopupMenu.ON_POPUP_ITEM_SELECT, #this!, "exportExcel")
        popupMenu!.insertMenuItem(1, 1100, "Export PDF").setCallback(BBjPopupMenu.ON_POPUP_ITEM_SELECT, #this!, "exportPdf")
        popupMenu!.insertMenuItem(2, 1200, "Export HTML").setCallback(BBjPopupMenu.ON_POPUP_ITEM_SELECT, #this!, "exportHtml")
        popupMenu!.insertMenuItem(3, 1300, "Export XML").setCallback(BBjPopupMenu.ON_POPUP_ITEM_SELECT, #this!, "exportXml")
        popupMenu!.insertMenuItem(4, 1400, "Export TXT").setCallback(BBjPopupMenu.ON_POPUP_ITEM_SELECT, #this!, "exportTxt")
        popupMenu!.insertMenuItem(5, 1400, "Export CSV").setCallback(BBjPopupMenu.ON_POPUP_ITEM_SELECT, #this!, "exportCsv")
        popupMenu!.insertMenuItem(6, 1500, "Export custom report").setCallback(BBjPopupMenu.ON_POPUP_ITEM_SELECT, #this!, "exportCustomReport")
REM         popupMenu!.insertSeparator(7)
REM         popupMenu!.insertMenuItem(8, 1600, "Options ...").setCallback(BBjPopupMenu.ON_POPUP_ITEM_SELECT, #this!, "showOptions")
        
        #mainWindow! = wnd!
    methodend
    
    method public void onMenuButtonPush(BBjEvent ev!)
        dirOnly = 0
        useSaveDialog = 1
        path$ = java.lang.System.getProperty("user.home") + "/documents/"
        #fileChooser! = new FileChooser(path$, 10, 10, #pgmName$ + "_PDF_exportMenuButton", 1, dirOnly, 0, useSaveDialog)
    methodend
    
    method public void onFileChooserFinish(BBjNamespaceEvent ev!)
        val! = ev!.getNewValue()
        switch val!
            case "::SAVE::"
            case "::OPEN::"
                chosenDirOrFilePath! = #fileChooser!.getSelectedFile()
                break
            case "::CANCEL::"
                rem do nothing
                methodret
                break
        swend
        
        if !chosenDirOrFilePath!.toLowerCase().endsWith(".pdf") then chosenDirOrFilePath! = chosenDirOrFilePath! + ".pdf"
        
        filter! = new DataRow()
        filter!.setFieldValue("USERID", #cfgBC!.getUserName())
        filter!.setFieldValue("KEYX", "pdf")
        filter!.setFieldValue("REALM", "std")
        filter!.setFieldValue("SETTING", "std")
        #cfgBC!.setFilter(filter!)
        rs! = #cfgBC!.retrieve()
        config$ = rs!.get(0).getFieldAsString("CONFIG")
        dr! = DataRowJsonMapper.fromJson(config$)
        dr! = cast(DataRow, dr!.getField("pdf").getValue())
        pageFittingOptions! = dr!.getFieldAsNumber("fitting").intValue()
        fontSize! = dr!.getFieldAsNumber("fontSize")
        pageLayout! = dr!.getFieldAsNumber("pageLayout").intValue()
        
        rs! = #grid!.getGrid().getRS()
        
        path! = Paths.get(chosenDirOrFilePath!)
        outputFilename$ = path!.getFileName().toString()
        if path!.getParent() <> null() then
            path$ = path!.getParent().toString() + "/"
        else
            path$ = ""
        endif
        
        dr! = rs!.get(0)
        
        rem creating SheetConfiguration
        declare SheetConfiguration sheetConfiguration!
        sheetConfiguration! = new SheetConfiguration()
        
        fieldWidths! = ColumnWidthCalculator.calculateColumnWidths(rs!, fontSize!.intValue())

        visibleRowsVec! = #grid!.getGrid().getColumnState().getVisibleColumns()
        for i = visibleRowsVec!.size() - 1 to 0 step - 1
            fieldName$ = visibleRowsVec!.get(i)
            header! = dr!.getDataField(fieldName$).getAttribute("LABEL")
            if header! = null() then header! = fieldName$
            width = fieldWidths!.getFieldAsNumber(fieldName$)
            sheetConfiguration!.insertColumn(header!, width, fieldName$, k)
        next i
        
        sheetConfiguration!.setReportDetails(new ReportDetails(0, "reportName", "tableName", "0000000000000000000001"))
        sheetConfiguration!.setFontSize(fontSize!.intValue())
        
        fitTo = pageFittingOptions!
        
        rem exporting
        declare File outputFile!
        outputFile! = ResultSetExporter.exportToPDF(outputFilename$, path$, rs!, sheetConfiguration!, Boolean.FALSE, fitTo, pageLayout!)
        
        if info(3,6) = "5" then
            fs! = bbjapi().getThinClient().getClientFileSystem() 
            cf! = fs!.getClientFile(chosenDirOrFilePath!) 
            cf!.copyToClient(outputFile!.getAbsolutePath())
        endif
        
        bbjapi().getThinClient().browse(outputFile!.getAbsolutePath().replace("\", "/"))
    methodend
    
    method private void saveConfiguration()
        json! = new JsonObject()
        json!.add("pdf", new JsonObject())
        
        pdf! = json!.getAsJsonObject("pdf")
        pdf!.addProperty("fitting", str(#getSelectedFittingOption()))
        pdf!.addProperty("fontSize", str(#getFontSize()))
        pdf!.addProperty("pageLayout", str(#getSelectedPageLayout()))
        
        #saveConfiguration(new Gson().toJson(json!), "pdf")
    methodend
    
    method public void setGrid(BusinessGrid grid!)
        #grid! = grid!
    methodend
    
    method public void setBC(CustomConfigurationsBC cfgBC!)
        #cfgBC! = cfgBC!
    methodend
    
REM     method public void showOptions(BBjPopupSelectEvent ev!)
REM         if #optionsDialog! = null() then
REM             #optionsDialog! = new OptionsDialog(#pgmName$)
REM             #optionsDialog!.setConfigurationsBC(#cfgBC!)
REM         endif
REM         #optionsDialog!.createDialogWindow()
REM     methodend
    
    method public void exportExcel(BBjPopupSelectEvent ev!)
        if #exportXlsxDialog! = null() then
            #exportXlsxDialog! = new ExportXlsxDialog(#pgmName$, #grid!, Boolean.FALSE)
            #exportXlsxDialog!.setConfigurationsBC(#cfgBC!)
        endif
    
        #exportXlsxDialog!.createDialogWindow()
    methodend
    
    method public void exportPdf(BBjPopupSelectEvent ev!)
        if #exportPdfDialog! = null() then
            #exportPdfDialog! = new ExportPdfDialog(#pgmName$, #grid!, Boolean.FALSE)
            #exportPdfDialog!.setConfigurationsBC(#cfgBC!)
        endif
    
        #exportPdfDialog!.createDialogWindow()
    methodend
    
    method public void exportHtml(BBjPopupSelectEvent ev!)
        if #exportHtmlDialog! = null() then
            #exportHtmlDialog! = new ExportHtmlDialog(#pgmName$, #grid!, Boolean.FALSE)
            #exportHtmlDialog!.setConfigurationsBC(#cfgBC!)
        endif
    
        #exportHtmlDialog!.createDialogWindow()

REM         dirOnly = 0
REM         useSaveDialog = 1
REM         if #getembedded() then dirOnly = 1, useSaveDialog = 0
REM         path$ = #getPATH()
REM         if #getcustomSaveLocation() <> "" then path$ = #getcustomSaveLocation()
REM         #fileChooser! = new FileChooser(path$, 10, 10, #getpgmName() + "_HTML_" + str(#getembedded()), 1, dirOnly, 0, useSaveDialog) 
REM          
REM         ns! = BBjAPI().getGroupNamespace()
REM         ns!.setCallbackForVariable(#pgmName$ + "_HTML_user_action", #this!, "onFileChooserHtmlFinish")
    methodend
    
REM     method public void onFileChooserHtmlFinish(BBjNamespaceEvent ev!)
REM         val! = ev!.getNewValue()
REM         
REM         switch val!
REM             case "::SAVE::"
REM             case "::OPEN::"
REM                 chosenDirOrFilePath! = #fileChooser!.getSelectedFile()
REM                 break
REM             case "::CANCEL::"
REM                 rem do nothing
REM                 methodret
REM                 break
REM         swend
REM         
REM         if chosenDirOrFilePath!.trim() <> "" then
REM             if !chosenDirOrFilePath!.toLowerCase().trim().endsWith(".html") then chosenDirOrFilePath! = chosenDirOrFilePath! + ".html"
REM             rs! = #grid!.getGrid().getRS()
REM             if rs! = null() or rs!.isEmpty() then methodret
REM             
REM             writer! = new FileWriter(chosenDirOrFilePath!)
REM             
REM             ResultSetExporter.writeHTML(rs!, writer!)
REM         endif
REM     methodend
    
    method public void exportXml(BBjPopupSelectEvent ev!)
        if #exportXmlDialog! = null() then
            #exportXmlDialog! = new ExportXmlDialog(#pgmName$, #grid!, Boolean.FALSE)
            #exportXmlDialog!.setConfigurationsBC(#cfgBC!)
        endif
    
        #exportXmlDialog!.createDialogWindow()
    methodend
    
    method public void exportTxt(BBjPopupSelectEvent ev!)
        if #exportTxtDialog! = null() then
            #exportTxtDialog! = new ExportTxtDialog(#pgmName$, #grid!, Boolean.FALSE)
            #exportTxtDialog!.setConfigurationsBC(#cfgBC!)
        endif
    
        #exportTxtDialog!.createDialogWindow()
    methodend
    
    method public void exportCsv(BBjPopupSelectEvent ev!)
        if #exportCsvDialog! = null() then
            #exportCsvDialog! = new ExportCsvDialog(#pgmName$, #grid!, Boolean.FALSE)
            #exportCsvDialog!.setConfigurationsBC(#cfgBC!)
        endif
    
        #exportCsvDialog!.createDialogWindow()
    methodend
    
    method public void exportCustomReport(BBjPopupSelectEvent ev!)
        if #exportCustomReportDialog! = null() then
            #exportCustomReportDialog! = new ExportCustomReportDialog(#pgmName$, #grid!, Boolean.FALSE)
        endif
    
        #exportCustomReportDialog!.createDialogWindow()
    methodend
    
    method public void setBaristaHeaderVisible(Boolean visible!)
        #baristaHeaderVisible! = visible!
        
        if #exportPdfDialog! = null() then
            #exportPdfDialog! = new ExportPdfDialog(#grid!, Boolean.FALSE)
        endif
        
        #exportPdfDialog!.setBaristaHexerVisible(#baristaHeaderVisible!)
    methodend
    
    method public void setProgramName(BBjString pgmName$)
        #pgmName$ = pgmName$
        ns! = BBjAPI().getGroupNamespace()
        ns!.setCallbackForVariable(#pgmName$ + "_PDF_exportMenuButton_user_action", #this!, "onFileChooserFinish")
    methodend

classend